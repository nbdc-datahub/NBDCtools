[{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/NBDCtools.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"NBDCtools","text":"NBDCtools R package makes use regular structure NBDC datasets, especially standardized metadata (data dictionary levels table; see, e.g., ) organization tabulated data one file per table BIDS rawdata/phenotype/ directory (see information structure ABCD file-based data, HBCD study). package assumes users downloaded complete tabulated dataset file-based data saved files local directory. Using functions package, users can create custom datasets specifying study name set variable names /table names data dictionary. making use study’s metadata, functions automatically retrieve needed columns different files disk, join data frame memory. provides fast, storage- memory-efficient, highly reproducible way work data NBDC Data Hub can used alternative creating downloading different datasets (creating -disk representations ) Data Exploration & Analysis Portal (DEAP) Lasso applications.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/NBDCtools.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"NBDCtools","text":"begin using NBDCtools package effectively, essential frequently utilized function create_dataset(). omnibus function loads selected variables files creates analysis-ready data frame one step, incorporating various transformation cleaning options. vignette, demonstrate use create_dataset() function simulated ABCD data files. illustrate join variables, perform various transformations, explore advanced options.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/NBDCtools.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"NBDCtools","text":"IMPORTANT: Please ensure NBDCtools NBDCtoolsData packages installed. NBDCtools loaded, automatically load required objects NBDCtoolsData package, don’t need load separately. load NBDCtools, use following command: Alternatively, can call functions directly without loading package using ::, e.g., NBDCtools::name_of_function(...). can also access NBDCtoolsData objects directly using colon-colon syntax.","code":"library(NBDCtools) #> Welcome to the `NBDCtools` package! For more information, visit: https://software.nbdc-datahub.org/NBDCtools/ #> This package is developed by the ABCD Data Analysis, Informatics & Resource Center (DAIRC) at the J. Craig Venter Institute (JCVI)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/NBDCtools.html","id":"load-and-join-data","dir":"Articles","previous_headings":"","what":"Load and join data","title":"NBDCtools","text":"can use following command inspect simulated data files: Next, use create_dataset() function load data files dir_abcd selected variables interest. NOTE: simulated data contains variables rows. real-world scenario, file typically many rows tables. Users can select variables join using following four arguments: vars: Individual variables interest tables: Full tables interest vars_add: Additional individual variables tables_add: Additional full tables Columns interest specified vars tables arguments full-joined, meaning resulting data frame retains rows least one non-missing value selected variables/tables. Additional columns specified vars_add tables_add arguments left-joined data frame containing columns interest, retaining rows adding columns additional variables/tables. create_dataset() function utilizes low-level function join_tabulated() data joining. information join_tabulated() function, refer Join data vignette. diagram detailing joining strategy main additional variables/tables, see page (NBCDtools package uses approach DEAP application). example, specify mr_y_qc__raw__dmri variable vars move others vars_add, different number rows data:","code":"dir_abcd <- system.file(\"extdata\", \"phenotype\", package = \"NBDCtools\") list.files(dir_abcd) #> [1] \"ab_g_dyn.parquet\"           \"ab_g_stc.parquet\"           #> [3] \"mr_y_qc__raw__dmri.parquet\" vars <- c(   \"ab_g_dyn__visit_type\",    \"ab_g_dyn__cohort_grade\",    \"ab_g_dyn__visit__day1_dt\",    \"ab_g_stc__gen_pc__01\",    \"ab_g_dyn__visit_age\",    \"ab_g_dyn__visit_days\",    \"ab_g_dyn__visit_dtt\",    \"mr_y_qc__raw__dmri__r01__series_t\" ) create_dataset(   dir_data = dir_abcd,   study = \"abcd\",   vars = vars ) #> ℹ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88… #> ℹ Joining 8 variables from 3 tables... #> ✔ Joining 8 variables from 3 tables... [405ms] #>  #> ℹ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88…✔ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88… #>  #> ℹ Converting categorical variables to factors. #> ✔ Converting categorical variables to factors. [128ms] #>  #> ℹ Adding variable and value labels. #> ✔ Adding variable and value labels. [223ms] #>  #> ✔ A dataset with 10 rows and 10 columns has been created. Time used: 0.02 #>   minutes. #> # A tibble: 10 × 10 #>    participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>    <chr>          <fct>      <fct>                <ord>                  #>  1 sub-0000000001 ses-02A    1                    NA                     #>  2 sub-0000000002 ses-03A    1                    NA                     #>  3 sub-0000000003 ses-01A    1                    7                      #>  4 sub-0000000004 ses-04A    2                    8                      #>  5 sub-0000000005 ses-01A    2                    8                      #>  6 sub-0000000006 ses-04A    3                    9                      #>  7 sub-0000000007 ses-05A    1                    6                      #>  8 sub-0000000008 ses-03A    3                    NA                     #>  9 sub-0000000009 ses-00S    3                    8                      #> 10 sub-0000000010 ses-04A    3                    8                      #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, ab_g_dyn__visit_dtt <dttm>, #> #   mr_y_qc__raw__dmri__r01__series_t <chr> create_dataset(   dir_data = dir_abcd,   study = \"abcd\",   vars = c(     \"mr_y_qc__raw__dmri__r01__series_t\"   ),   vars_add = c(     \"ab_g_dyn__visit_type\",     \"ab_g_dyn__cohort_grade\",      \"ab_g_dyn__visit__day1_dt\",     \"ab_g_stc__gen_pc__01\",      \"ab_g_dyn__visit_age\",     \"ab_g_dyn__visit_days\",      \"ab_g_dyn__visit_dtt\"   ) ) #> ℹ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88… #> ℹ Joining 8 variables (1 main; 7 additional) from 3 tables #> ✔ Joining 15 variables (8 main; 7 additional) from 3 tables [115ms] #>  #> ℹ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88…✔ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88… #>  #> ℹ Converting categorical variables to factors. #> ✔ Converting categorical variables to factors. [110ms] #>  #> ℹ Adding variable and value labels. #> ✔ Adding variable and value labels. [217ms] #>  #> ✔ A dataset with 7 rows and 10 columns has been created. Time used: 0.01 #>   minutes. #> # A tibble: 7 × 10 #>   participant_id session_id mr_y_qc__raw__dmri__r01__seri…¹ ab_g_dyn__visit_type #>   <chr>          <fct>      <chr>                           <fct>                #> 1 sub-0000000002 ses-03A    16:45:46                        1                    #> 2 sub-0000000003 ses-01A    11:05:35                        1                    #> 3 sub-0000000004 ses-04A    11:05:35                        2                    #> 4 sub-0000000005 ses-01A    16:45:46                        2                    #> 5 sub-0000000008 ses-03A    10:14:34                        3                    #> 6 sub-0000000009 ses-00S    15:47:35                        3                    #> 7 sub-0000000010 ses-04A    15:47:35                        3                    #> # ℹ abbreviated name: ¹​mr_y_qc__raw__dmri__r01__series_t #> # ℹ 6 more variables: ab_g_dyn__cohort_grade <ord>, #> #   ab_g_dyn__visit__day1_dt <date>, ab_g_stc__gen_pc__01 <dbl>, #> #   ab_g_dyn__visit_age <dbl>, ab_g_dyn__visit_days <int>, #> #   ab_g_dyn__visit_dtt <dttm>"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/NBDCtools.html","id":"process-data","dir":"Articles","previous_headings":"","what":"Process data","title":"NBDCtools","text":"loading joining data, create_dataset() function performs several transformation steps. step reported message console, allowing users see actions taken. example, output indicates function executed following steps: steps utilize lower-level functions can used independently. Transform data vignette describes .","code":"#> ℹ Converting categorical variables to factors. #> ℹ Adding variable and value labels."},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/NBDCtools.html","id":"default-transformations","dir":"Articles","previous_headings":"Process data","what":"Default transformations","title":"NBDCtools","text":"default, create_dataset() performs following two transformation steps (users can choose execute setting respective arguments FALSE): categ_to_factor: Converts categorical columns factors using lower-level function transf_factor(). add_labels: Adds variable value labels using lower-level function transf_label().","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/NBDCtools.html","id":"additional-transformations","dir":"Articles","previous_headings":"Process data","what":"Additional transformations","title":"NBDCtools","text":"Users can also apply additional transformations data setting respective arguments TRUE. following transformations available: value_to_label: Converts categorical columns’ numeric values labels using lower-level function transf_value_to_label(). value_to_na: Converts categorical missingness/non-response codes NA using lower-level function transf_value_to_na(). time_to_hms: Converts time variables hms class using lower-level function transf_time_to_hms(). example adding additional transformations create_dataset() function:","code":"create_dataset(   dir_data = dir_abcd,   study = \"abcd\",   vars = vars,   value_to_label = TRUE,   value_to_na = TRUE,   time_to_hms = TRUE ) #> ℹ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88… #> ℹ Joining 8 variables from 3 tables... #> ✔ Joining 8 variables from 3 tables... [136ms] #>  #> ℹ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88…✔ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88… #>  #> ℹ Converting categorical variables to factors. #> ✔ Converting categorical variables to factors. [111ms] #>  #> ℹ Adding variable and value labels. #> ✔ Adding variable and value labels. [224ms] #>  #> ℹ Converting categorical variables' numeric values to labels. #> ✔ Converting categorical variables' numeric values to labels. [20ms] #>  #> ℹ Converting categorical missingness/non-response codes to \"NA\". #> ✔ Converting categorical missingness/non-response codes to \"NA\". [88ms] #>  #> ℹ Converting time variables to <hms> class. #> ✔ Converting time variables to <hms> class. [80ms] #>  #> ✔ A dataset with 10 rows and 10 columns has been created. Time used: 0.01 #>   minutes. #> # A tibble: 10 × 10 #>    participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>    <chr>          <fct>      <fct>                <fct>                  #>  1 sub-0000000001 ses-02A    On-site              NA                     #>  2 sub-0000000002 ses-03A    On-site              NA                     #>  3 sub-0000000003 ses-01A    On-site              7th grade              #>  4 sub-0000000004 ses-04A    Remote               8th grade              #>  5 sub-0000000005 ses-01A    Remote               8th grade              #>  6 sub-0000000006 ses-04A    Hybrid               9th grade              #>  7 sub-0000000007 ses-05A    On-site              6th grade              #>  8 sub-0000000008 ses-03A    Hybrid               NA                     #>  9 sub-0000000009 ses-00S    Hybrid               8th grade              #> 10 sub-0000000010 ses-04A    Hybrid               8th grade              #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, ab_g_dyn__visit_dtt <dttm>, #> #   mr_y_qc__raw__dmri__r01__series_t <time>"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/NBDCtools.html","id":"shadow-matrices","dir":"Articles","previous_headings":"Process data","what":"Shadow matrices","title":"NBDCtools","text":"create_dataset() function also includes option process shadow matrices. Shadow matrices tables dimensions original data provide information given cell missing original data. Using bind_shadow = TRUE argument, users can append shadow matrix additional columns end data frame. Please note shadow matrices processed differently ABCD HBCD study datasets: ABCD: Currently, raw shadow matrix data released. , create_dataset() create shadow matrix data using naniar::as_shadow() bind_shadow set TRUE. HBCD: shadow matrix provided separate file rawdata/phenotype/ directory. create_dataset() function read file append data frame default bind_shadow set TRUE. Users can use additional argument naniar_shadow = TRUE prefer shadow matrix created data using naniar::as_shadow() instead: IMPORTANT: naniar::as_shadow() requires naniar package installed, dependency NBDCtools. want use option, please install naniar package first using install.packages(\"naniar\"). information shadow matrices, please refer Work shadow matrices vignette.","code":"create_dataset(   dir_data = dir_abcd,   study = \"abcd\",   vars = vars,   bind_shadow = TRUE ) create_dataset(   dir_data = dir_abcd,   study = \"abcd\",   vars = vars,   bind_shadow = TRUE,   naniar_shadow = TRUE )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/NBDCtools.html","id":"advanced-options","dir":"Articles","previous_headings":"","what":"Advanced options","title":"NBDCtools","text":"create_dataset() function calls several low-level functions process data. low-level functions additional arguments can used customize processing. use arguments, users can pass create_dataset() function using ... argument. example, select value_to_na = TRUE, function call lower-level transf_value_to_na() function, convert factor levels represent missingness/non-response codes NA. useful data contains specific codes indicate missingness like ABCD study \"222\", \"333\", \"444\", etc. used consistently (see, details). One can change non-response/missingness codes converted NA passing missing_codes argument create_dataset() function. example, want convert levels 1 2 NA (typically advisable real-world scenario), can passing missing_codes argument create_dataset() function follows: First create_dataset() prints message indicating additional arguments passed low-level functions: results, can see column ab_g_dyn__visit_type, levels 1 2 converted NA, values kept . user defines wrong existing arguments, ignored. example, pass additional argument my_arg create_dataset() function, ignored returned data pass argument : Please refer lower-level functions documentation information available arguments usage Reference page.","code":"create_dataset(   dir_data = dir_abcd,   study = \"abcd\",   vars = vars,   value_to_na = TRUE,   missing_codes = c(\"1\", \"2\") ) #> ℹ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88… #> ℹ Joining 8 variables from 3 tables... #> ✔ Joining 8 variables from 3 tables... [134ms] #>  #> ℹ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88…✔ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88… #>  #> ℹ Converting categorical variables to factors. #> ✔ Converting categorical variables to factors. [112ms] #>  #> ℹ Adding variable and value labels. #> ✔ Adding variable and value labels. [217ms] #>  #> ℹ Converting categorical missingness/non-response codes to \"NA\". #> ℹ Argument `missing_codes` is passed to `transf_value_to_na()`. #> ✔ Argument `missing_codes` is passed to `transf_value_to_na()`. [11ms] #>  #> ℹ Converting categorical missingness/non-response codes to \"NA\".✔ Converting categorical missingness/non-response codes to \"NA\". [112ms] #>  #> ✔ A dataset with 10 rows and 10 columns has been created. Time used: 0.01 #>   minutes. #> # A tibble: 10 × 10 #>    participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>    <chr>          <fct>      <fct>                <ord>                  #>  1 sub-0000000001 ses-02A    NA                   NA                     #>  2 sub-0000000002 ses-03A    NA                   NA                     #>  3 sub-0000000003 ses-01A    NA                   7                      #>  4 sub-0000000004 ses-04A    NA                   8                      #>  5 sub-0000000005 ses-01A    NA                   8                      #>  6 sub-0000000006 ses-04A    3                    9                      #>  7 sub-0000000007 ses-05A    NA                   6                      #>  8 sub-0000000008 ses-03A    3                    NA                     #>  9 sub-0000000009 ses-00S    3                    8                      #> 10 sub-0000000010 ses-04A    3                    8                      #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, ab_g_dyn__visit_dtt <dttm>, #> #   mr_y_qc__raw__dmri__r01__series_t <chr> #> ℹ Argument `missing_codes` is passed to `transf_value_to_na()`. create_dataset(   dir_data = dir_abcd,   study = \"abcd\",   vars = vars,   value_to_na = TRUE,   my_arg = \"some_value\" # this argument will be ignored ) #> ℹ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88… #> ℹ Joining 8 variables from 3 tables... #> ✔ Joining 8 variables from 3 tables... [134ms] #>  #> ℹ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88…✔ Loading the data from the \"/home/runner/.cache/R/renv/library/NBDCtools-2ca88… #>  #> ℹ Converting categorical variables to factors. #> ✔ Converting categorical variables to factors. [111ms] #>  #> ℹ Adding variable and value labels. #> ✔ Adding variable and value labels. [217ms] #>  #> ℹ Converting categorical missingness/non-response codes to \"NA\". #> ✔ Converting categorical missingness/non-response codes to \"NA\". [88ms] #>  #> ✔ A dataset with 10 rows and 10 columns has been created. Time used: 0.01 #>   minutes. #> # A tibble: 10 × 10 #>    participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>    <chr>          <fct>      <fct>                <ord>                  #>  1 sub-0000000001 ses-02A    1                    NA                     #>  2 sub-0000000002 ses-03A    1                    NA                     #>  3 sub-0000000003 ses-01A    1                    7                      #>  4 sub-0000000004 ses-04A    2                    8                      #>  5 sub-0000000005 ses-01A    2                    8                      #>  6 sub-0000000006 ses-04A    3                    9                      #>  7 sub-0000000007 ses-05A    1                    6                      #>  8 sub-0000000008 ses-03A    3                    NA                     #>  9 sub-0000000009 ses-00S    3                    8                      #> 10 sub-0000000010 ses-04A    3                    8                      #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, ab_g_dyn__visit_dtt <dttm>, #> #   mr_y_qc__raw__dmri__r01__series_t <chr>"},{"path":[]},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/benchmark.html","id":"randomly-selected-tables","dir":"Articles","previous_headings":"Loading data > Loading time","what":"Randomly selected tables","title":"NBDCtools Benchmark","text":"first benchmarking scenario, randomly selected 20 700 tables ABCD data dictionary loaded joined variables tables using join_tabulated() function. scenario represents common use case researchers specific domain interest want load variables selected tables within domain. number variables varies tables, plot displays results number variables.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/benchmark.html","id":"randomly-selected-variables","dir":"Articles","previous_headings":"Loading data > Loading time","what":"Randomly selected variables","title":"NBDCtools Benchmark","text":"second benchmarking scenario, used join_tabulated() function join randomly selected variables ABCD data dictionary, independent tables belong . represents “worst case” scenario, function load join variables larger number tables.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/benchmark.html","id":"under-1000-variables","dir":"Articles","previous_headings":"Loading data > Loading time > Randomly selected variables","what":"Under 1000 variables","title":"NBDCtools Benchmark","text":"plot includes cases 1000 variables represents common use case, typically analyses done small subset variables.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/benchmark.html","id":"all-ranges","dir":"Articles","previous_headings":"Loading data > Loading time > Randomly selected variables","what":"All ranges","title":"NBDCtools Benchmark","text":"plot includes cases, datasets ranging hundred 80k variables.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/benchmark.html","id":"comparison-of-random-variables-vs--random-tables","dir":"Articles","previous_headings":"Loading data > Loading time","what":"Comparison of random variables vs. random tables","title":"NBDCtools Benchmark","text":"following plot, compare time taken load random variables vs. random tables. expected, loading random variables takes significantly time loading random tables.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/benchmark.html","id":"memory-usage","dir":"Articles","previous_headings":"Loading data","what":"Memory usage","title":"NBDCtools Benchmark","text":"Memory usage stable across different runs across different machines. following plot compares memory usage, measured GB, joining random tables vs. random variables. Joining random variables requires memory random tables. joining random variables typically requires load tables joining random tables R’s garbage collection imperfect memory released immediately data joined. However, memory difference significant, memory usage stable across different runs. Therefore, following statistics can used gold standard memory requirements loading joining data using NBDCtools.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/benchmark.html","id":"processing-data","dir":"Articles","previous_headings":"","what":"Processing data","title":"NBDCtools Benchmark","text":"create analysis-ready data, columns converted correct type, .e., categorical columns converted R factors. achieved using transf_factor() function NBDCtools. provide time memory usage function. dataset loaded memory, downstream processing speed memory usage independent whether dataset created joining randomly selected variables randomly selected tables. , group characteristic following plot.","code":""},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/benchmark.html","id":"memory-usage-1","dir":"Articles","previous_headings":"Processing data","what":"Memory usage","title":"NBDCtools Benchmark","text":"following plot presents object size difference data loaded processed transf_factor() consecutive step.  IMPORTANT NOTE: plot displays memory needed represent resulting object. example, based plot see loading 10,000 variables requires 15.8 GB memory, processing transf_factor() requires 17.6 GB memory. However, mean maximum memory needed creating object 17.6 GB. instances input data copied processing, sometimes multiple times, maximum memory usage processing can much higher final memory usage. recommend plan 2-3x memory used final data frame available machine avoid memory issues processing.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/filter.html","id":"prepare-data","dir":"Articles","previous_headings":"","what":"Prepare data","title":"Filter data","text":"NOTE: running code vignette, assume already read Get started page Join data vignette, know load data given NBDC study release. demonstration purposes, load simulated ABCD dataset included package.","code":"library(NBDCtools) #> Welcome to the `NBDCtools` package! For more information, visit: https://software.nbdc-datahub.org/NBDCtools/ #> This package is developed by the ABCD Data Analysis, Informatics & Resource Center (DAIRC) at the J. Craig Venter Institute (JCVI)  data <- readRDS(   system.file(\"extdata\", \"simulated_data_abcd.rds\", package = \"NBDCtools\") )  dplyr::glimpse(data) #> Rows: 10 #> Columns: 10 #> $ participant_id                    <chr> \"sub-0000000006\", \"sub-0000000007\", … #> $ session_id                        <chr> \"ses-04A\", \"ses-05A\", \"ses-02A\", \"se… #> $ ab_g_dyn__visit_type              <chr> \"3\", \"1\", \"1\", \"1\", \"3\", \"3\", \"2\", \"… #> $ ab_g_dyn__cohort_grade            <chr> \"9\", \"6\", NA, \"7\", \"8\", NA, \"8\", \"8\"… #> $ ab_g_dyn__visit__day1_dt          <date> 2020-10-19, 2022-05-19, 2022-09-12,… #> $ ab_g_stc__gen_pc__01              <dbl> -0.022995395, 0.006506271, 0.0039703… #> $ ab_g_dyn__visit_age               <dbl> 11.63836, 13.18630, 10.11475, 10.114… #> $ ab_g_dyn__visit_days              <int> 1, 1, 2, 1, 1, 1, 2, 2, 1, 2 #> $ mr_y_qc__raw__dmri__r01__series_t <chr> NA, NA, NA, \"11:05:35\", \"15:47:35\", … #> $ ab_g_dyn__visit_dtt               <dttm> 2022-05-19 13:01:00, 2019-02-17 09:2…"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/filter.html","id":"filter-by-participant-id-and-session-id","dir":"Articles","previous_headings":"","what":"Filter by participant ID and session ID","title":"Filter data","text":"filter_id_events() function accepts vector concatenated participant session IDs, separated underscore _, data frame participant_id session_id columns. function filter data specified participant/events return data frame filtered data. Alternatively, want keep rows match specified participant session IDs, can set revert = TRUE argument.","code":"# filter using a vector of concatenated participant and session IDs vec_id_events = c(   \"sub-0000000006_ses-04A\",    \"sub-0000000007_ses-05A\",   \"sub-0000000002_ses-03A\" ) data |>    filter_id_events(vec_id_events) #> # A tibble: 3 × 10 #>   participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>   <chr>          <chr>      <chr>                <chr>                  #> 1 sub-0000000006 ses-04A    3                    9                      #> 2 sub-0000000007 ses-05A    1                    6                      #> 3 sub-0000000002 ses-03A    1                    NA                     #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <chr>, #> #   ab_g_dyn__visit_dtt <dttm>  # filter using a data frame with participant_id and session_id columns data_filter <- dplyr::tribble(   ~participant_id,  ~session_id,   \"sub-0000000006\", \"ses-04A\",    \"sub-0000000007\", \"ses-05A\",    \"sub-0000000002\", \"ses-03A\" ) data |>   filter_id_events(data_filter) #> # A tibble: 3 × 10 #>   participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>   <chr>          <chr>      <chr>                <chr>                  #> 1 sub-0000000006 ses-04A    3                    9                      #> 2 sub-0000000007 ses-05A    1                    6                      #> 3 sub-0000000002 ses-03A    1                    NA                     #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <chr>, #> #   ab_g_dyn__visit_dtt <dttm> data |>    filter_id_events(vec_id_events, revert = TRUE) #> # A tibble: 7 × 10 #>   participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>   <chr>          <chr>      <chr>                <chr>                  #> 1 sub-0000000001 ses-02A    1                    NA                     #> 2 sub-0000000003 ses-01A    1                    7                      #> 3 sub-0000000010 ses-04A    3                    8                      #> 4 sub-0000000008 ses-03A    3                    NA                     #> 5 sub-0000000004 ses-04A    2                    8                      #> 6 sub-0000000009 ses-00S    3                    8                      #> 7 sub-0000000005 ses-01A    2                    8                      #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <chr>, #> #   ab_g_dyn__visit_dtt <dttm>"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/filter.html","id":"filter-abcd-events","dir":"Articles","previous_headings":"","what":"Filter ABCD events","title":"Filter data","text":"filter_events_abcd() function provides convenient way specify event-based filters ABCD datasets using shorthands. shorthands can single condition, \"annual\", \"substudy\", \"odd\", combination conditions provided vector strings, like c(\"annual\", \"even\"). following conditions available: \"core\": events ABCD core study \"annual\": annual events ABCD core study \"mid_year\": mid-year events ABCD core study \"substudy\": events ABCD substudies \"covid\": events COVID substudy \"sdev\": events Social Development substudy \"even\": even-numbered events \"odd\": odd-numbered events numerical expressions like >2 <=5 filter events number string used filter session_id column","code":"# retain only annual events data |>    filter_events_abcd(\"annual\") #> # A tibble: 9 × 10 #>   participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>   <chr>          <chr>      <chr>                <chr>                  #> 1 sub-0000000006 ses-04A    3                    9                      #> 2 sub-0000000007 ses-05A    1                    6                      #> 3 sub-0000000001 ses-02A    1                    NA                     #> 4 sub-0000000003 ses-01A    1                    7                      #> 5 sub-0000000010 ses-04A    3                    8                      #> 6 sub-0000000008 ses-03A    3                    NA                     #> 7 sub-0000000004 ses-04A    2                    8                      #> 8 sub-0000000005 ses-01A    2                    8                      #> 9 sub-0000000002 ses-03A    1                    NA                     #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <chr>, #> #   ab_g_dyn__visit_dtt <dttm>  # retain only even annual events (\"imaging events\") data |>    filter_events_abcd(c(\"annual\", \"even\")) #> # A tibble: 4 × 10 #>   participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>   <chr>          <chr>      <chr>                <chr>                  #> 1 sub-0000000006 ses-04A    3                    9                      #> 2 sub-0000000001 ses-02A    1                    NA                     #> 3 sub-0000000010 ses-04A    3                    8                      #> 4 sub-0000000004 ses-04A    2                    8                      #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <chr>, #> #   ab_g_dyn__visit_dtt <dttm>  # retain only odd annual events before the 4-year follow-up data |>    filter_events_abcd(c(\"annual\", \"odd\", \"<4\")) #> # A tibble: 4 × 10 #>   participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>   <chr>          <chr>      <chr>                <chr>                  #> 1 sub-0000000003 ses-01A    1                    7                      #> 2 sub-0000000008 ses-03A    3                    NA                     #> 3 sub-0000000005 ses-01A    2                    8                      #> 4 sub-0000000002 ses-03A    1                    NA                     #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <chr>, #> #   ab_g_dyn__visit_dtt <dttm>  # retain only screener events (using a string condition to filter events) data |>    filter_events_abcd(c(\"00S\")) #> # A tibble: 1 × 10 #>   participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>   <chr>          <chr>      <chr>                <chr>                  #> 1 sub-0000000009 ses-00S    3                    8                      #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <chr>, #> #   ab_g_dyn__visit_dtt <dttm>"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/filter.html","id":"filter-empty-rows","dir":"Articles","previous_headings":"","what":"Filter empty rows","title":"Filter data","text":"combining data different tables, can end rows values variables (besides identifier columns). typically want keep rows don’t contain useful information. package provides function remove rows—filter_empty_rows(). simulated dataset empty rows. demonstrate function, can manually set rows NA values apply filter_empty_rows() function afterwards. can see, first 5 rows missing values variables removed. NOTE: filter_empty_rows() function automatically called join_tabulated() create_dataset() functions joining data NBDC study datasets, need call explicitly. want keep empty rows, can set remove_empty_rows = FALSE argument two functions.","code":"data_empty <- data[1:5, ] |>   dplyr::mutate(dplyr::across(-c(participant_id, session_id), ~ NA)) |>    dplyr::bind_rows(data[-(1:5), ]) data_empty #> # A tibble: 10 × 10 #>    participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>    <chr>          <chr>      <chr>                <chr>                  #>  1 sub-0000000006 ses-04A    NA                   NA                     #>  2 sub-0000000007 ses-05A    NA                   NA                     #>  3 sub-0000000001 ses-02A    NA                   NA                     #>  4 sub-0000000003 ses-01A    NA                   NA                     #>  5 sub-0000000010 ses-04A    NA                   NA                     #>  6 sub-0000000008 ses-03A    3                    NA                     #>  7 sub-0000000004 ses-04A    2                    8                      #>  8 sub-0000000009 ses-00S    3                    8                      #>  9 sub-0000000005 ses-01A    2                    8                      #> 10 sub-0000000002 ses-03A    1                    NA                     #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <chr>, #> #   ab_g_dyn__visit_dtt <dttm>  # filter empty rows data_empty |>    filter_empty_rows() #> # A tibble: 5 × 10 #>   participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>   <chr>          <chr>      <chr>                <chr>                  #> 1 sub-0000000008 ses-03A    3                    NA                     #> 2 sub-0000000004 ses-04A    2                    8                      #> 3 sub-0000000009 ses-00S    3                    8                      #> 4 sub-0000000005 ses-01A    2                    8                      #> 5 sub-0000000002 ses-03A    1                    NA                     #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <chr>, #> #   ab_g_dyn__visit_dtt <dttm>"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/filter.html","id":"filter-empty-columns","dir":"Articles","previous_headings":"","what":"Filter empty columns","title":"Filter data","text":"Similarly, datasets can also contain completely empty columns. can remove data using filter_empty_cols() function. , modify simulated data create two empty columns execute filter_empty_cols() remove .","code":"data_empty_cols <- data |>    dplyr::mutate(     ab_g_dyn__visit_type = NA,     ab_g_dyn__cohort_grade = NA   )  data_empty_cols #> # A tibble: 10 × 10 #>    participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>    <chr>          <chr>      <lgl>                <lgl>                  #>  1 sub-0000000006 ses-04A    NA                   NA                     #>  2 sub-0000000007 ses-05A    NA                   NA                     #>  3 sub-0000000001 ses-02A    NA                   NA                     #>  4 sub-0000000003 ses-01A    NA                   NA                     #>  5 sub-0000000010 ses-04A    NA                   NA                     #>  6 sub-0000000008 ses-03A    NA                   NA                     #>  7 sub-0000000004 ses-04A    NA                   NA                     #>  8 sub-0000000009 ses-00S    NA                   NA                     #>  9 sub-0000000005 ses-01A    NA                   NA                     #> 10 sub-0000000002 ses-03A    NA                   NA                     #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <chr>, #> #   ab_g_dyn__visit_dtt <dttm>  # filter empty columns data_empty_cols |>    filter_empty_cols() #> # A tibble: 10 × 8 #>    participant_id session_id ab_g_dyn__visit__day1_dt ab_g_stc__gen_pc__01 #>    <chr>          <chr>      <date>                                  <dbl> #>  1 sub-0000000006 ses-04A    2020-10-19                           -0.0230  #>  2 sub-0000000007 ses-05A    2022-05-19                            0.00651 #>  3 sub-0000000001 ses-02A    2022-09-12                            0.00397 #>  4 sub-0000000003 ses-01A    2021-06-09                            0.00360 #>  5 sub-0000000010 ses-04A    2021-06-11                            0.00397 #>  6 sub-0000000008 ses-03A    2022-09-12                            0.00575 #>  7 sub-0000000004 ses-04A    2019-07-08                            0.00575 #>  8 sub-0000000009 ses-00S    2021-05-12                           -0.0230  #>  9 sub-0000000005 ses-01A    2021-05-12                            0.00651 #> 10 sub-0000000002 ses-03A    2020-10-19                            0.00660 #> # ℹ 4 more variables: ab_g_dyn__visit_age <dbl>, ab_g_dyn__visit_days <int>, #> #   mr_y_qc__raw__dmri__r01__series_t <chr>, ab_g_dyn__visit_dtt <dttm>"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/filter.html","id":"combining-filters","dir":"Articles","previous_headings":"","what":"Combining filters","title":"Filter data","text":"can combine several filters chaining functions using pipe operator. example, can first exclude certain participant/events, filter events, finally remove empty rows using following code:","code":"data_empty |>    filter_id_events(     id_events = c(\"sub-0000000002_ses-03A\"),     revert = TRUE   ) |>   filter_events_abcd(\"odd\") |>   filter_empty_rows() #> # A tibble: 2 × 10 #>   participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>   <chr>          <chr>      <chr>                <chr>                  #> 1 sub-0000000008 ses-03A    3                    NA                     #> 2 sub-0000000005 ses-01A    2                    8                      #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <chr>, #> #   ab_g_dyn__visit_dtt <dttm>"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/join.html","id":"join-data","dir":"Articles","previous_headings":"","what":"Join data","title":"Join data","text":"can use join_tabulated() function load data files phenotype/ directory. function read join data different tables based variables /tables specified four arguments: vars: individual variables interest tables: full tables interest vars_add: additional individual variables tables_add: additional full tables vars tables arguments used specify main variables /tables interest. extracted respective files disk joined identifier columns single data frame memory. used join operation full_join(), .e., resulting data frame retains rows least one non-missing value chosen variables/tables. vars_add tables_add arguments used specify additional variables /tables joined main variables/tables interest. used join operation adding variables left_join(), .e., values already existing rows added new rows created. useful adding variables dataset important given analysis main variables interest (e.g., design/nesting demographic information). left-joining variables, one avoids creating new rows contain missing values main variables interest selected using vars tables. NOTE: simulated dataset, number rows significantly smaller real data. remove_empty_rows argument Joining selected columns different tables using join_tabulated() may result rows missing values. can occur participant/events lack data selected variables data , unselected variables joined tables. Since rows without data useful analysis, join_tabulated() function includes remove_empty_rows argument eliminate rows resulting dataset. default, argument set TRUE, meaning rows missing data removed. keep rows, set argument FALSE.","code":"join_tabulated(   dir_data = dir_abcd,   study = \"abcd\",   vars = c(     \"mr_y_qc__raw__dmri__r01__series_t\",     \"ab_g_dyn__visit_type\",     \"ab_g_dyn__cohort_grade\",      \"ab_g_dyn__visit__day1_dt\",     \"ab_g_stc__gen_pc__01\",      \"ab_g_dyn__visit_age\",     \"ab_g_dyn__visit_days\",      \"ab_g_dyn__visit_dtt\"   ) ) #> ℹ Joining 8 variables from 3 tables... #> ✔ Joining 8 variables from 3 tables... [139ms] #>  #> # A tibble: 10 × 10 #>    participant_id session_id mr_y_qc__raw__dmri__r01__ser…¹ ab_g_dyn__visit_type #>    <chr>          <chr>      <chr>                          <chr>                #>  1 sub-0000000001 ses-02A    NA                             1                    #>  2 sub-0000000002 ses-03A    16:45:46                       1                    #>  3 sub-0000000003 ses-01A    11:05:35                       1                    #>  4 sub-0000000004 ses-04A    11:05:35                       2                    #>  5 sub-0000000005 ses-01A    16:45:46                       2                    #>  6 sub-0000000006 ses-04A    NA                             3                    #>  7 sub-0000000007 ses-05A    NA                             1                    #>  8 sub-0000000008 ses-03A    10:14:34                       3                    #>  9 sub-0000000009 ses-00S    15:47:35                       3                    #> 10 sub-0000000010 ses-04A    15:47:35                       3                    #> # ℹ abbreviated name: ¹​mr_y_qc__raw__dmri__r01__series_t #> # ℹ 6 more variables: ab_g_dyn__cohort_grade <chr>, #> #   ab_g_dyn__visit__day1_dt <date>, ab_g_stc__gen_pc__01 <dbl>, #> #   ab_g_dyn__visit_age <dbl>, ab_g_dyn__visit_days <int>, #> #   ab_g_dyn__visit_dtt <dttm>"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/join.html","id":"shadow-matrices","dir":"Articles","previous_headings":"Join data","what":"Shadow matrices","title":"Join data","text":"HBCD data, join_tabulated() function can also join shadow matrices, store reasons missing values. Shadow matrix files located directory data files, one {table_name}_shadow.parquet file accompanying {table_name}.parquet file. load shadow matrices, use shadow = TRUE argument join_tabulated() function. load selected columns tables shadow matrix files combine single table, just like main data. information shadow matrices, see Work shadow matrices vignette.","code":"join_tabulated(   dir_data = dir_abcd,   study = \"hbcd\",   vars = ...,   tables = ...,   ...,   shadow = TRUE )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Work with metadata","text":"NBDCtools package provides functions access following metadata elements ABCD HBCD studies: Data dictionary: Variable table definitions, data types, information. Levels table: Value, labels, order categorical variables. Sessions table: Information study sessions/events. Identifier columns: Variables used identify unique observations.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Work with metadata","text":"","code":"library(NBDCtools) #> Welcome to the `NBDCtools` package! For more information, visit: https://software.nbdc-datahub.org/NBDCtools/ #> This package is developed by the ABCD Data Analysis, Informatics & Resource Center (DAIRC) at the J. Craig Venter Institute (JCVI)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data dictionary","title":"Work with metadata","text":"data dictionary contains information variables tabulated data given study, including names, labels, data types, tables belong , etc. read structure data dictionary NBDC studies, see .","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"basic-usage","dir":"Articles","previous_headings":"Data dictionary","what":"Basic usage","title":"Work with metadata","text":"","code":"# Get data dictionary for the ABCD Study (latest release) get_dd(\"abcd\") #> # A tibble: 83,206 × 44 #>    study domain      sub_domain source metric atlas table_name table_label name  #>    <chr> <chr>       <chr>      <chr>  <chr>  <chr> <glue>     <glue>      <glu> #>  1 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  2 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  3 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  4 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  5 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  6 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  7 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  8 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  9 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #> 10 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #> # ℹ 83,196 more rows #> # ℹ 35 more variables: label <glue>, instruction <chr>, header <chr>, #> #   note <chr>, unit <chr>, type_var <chr>, type_data <chr>, type_level <chr>, #> #   type_field <chr>, order_display <chr>, branching_logic <chr>, #> #   label_es <chr>, instruction_es <chr>, header_es <chr>, note_es <chr>, #> #   table_nda <chr>, table_nda_5_0 <chr>, table_redcap <chr>, name_nda <chr>, #> #   name_deap <chr>, name_redcap <chr>, name_redcap_exp <chr>, …  # Get data dictionary for the HBCD Study (latest release) get_dd(\"hbcd\") #> # A tibble: 48,699 × 30 #>    study domain     source table_name table_label name  label instruction header #>    <chr> <chr>      <chr>  <chr>      <chr>       <chr> <chr> <chr>       <chr>  #>  1 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Spec… NA          NA     #>  2 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Nail… NA          NA     #>  3 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Numb… NA          NA     #>  4 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Spec… NA          NA     #>  5 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Any … NA          NA     #>  6 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Scre… NA          NA     #>  7 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Scre… NA          NA     #>  8 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Conf… NA          NA     #>  9 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Conf… NA          NA     #> 10 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Conf… NA          NA     #> # ℹ 48,689 more rows #> # ℹ 21 more variables: note <chr>, unit <chr>, type_var <chr>, type_data <chr>, #> #   type_level <chr>, type_field <chr>, order_display <chr>, #> #   branching_logic <chr>, label_es <chr>, instruction_es <chr>, #> #   header_es <chr>, note_es <chr>, name_short <chr>, name_stata <chr>, #> #   url_table <chr>, url_warn_use <chr>, url_warn_data <chr>, #> #   url_table_warn_use <chr>, url_table_warn_data <chr>, …  # Get data dictionary for a specific release get_dd(\"abcd\", release = \"6.0\") #> # A tibble: 83,206 × 44 #>    study domain      sub_domain source metric atlas table_name table_label name  #>    <chr> <chr>       <chr>      <chr>  <chr>  <chr> <glue>     <glue>      <glu> #>  1 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  2 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  3 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  4 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  5 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  6 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  7 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  8 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  9 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #> 10 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #> # ℹ 83,196 more rows #> # ℹ 35 more variables: label <glue>, instruction <chr>, header <chr>, #> #   note <chr>, unit <chr>, type_var <chr>, type_data <chr>, type_level <chr>, #> #   type_field <chr>, order_display <chr>, branching_logic <chr>, #> #   label_es <chr>, instruction_es <chr>, header_es <chr>, note_es <chr>, #> #   table_nda <chr>, table_nda_5_0 <chr>, table_redcap <chr>, name_nda <chr>, #> #   name_deap <chr>, name_redcap <chr>, name_redcap_exp <chr>, …  # If you are not sure what releases are available, just use a random number # and the function will return an error message presenting the available # releases get_dd(\"abcd\", release = \"999.0\") #> Error in `get_dd()`: #> ! Invalid release '999.0'. Valid releases are: 6.0, latest #> If you believe this version should exist, it might be the metadata #> is outdated. Please update the `NBDCtoolsData` package to get the latest metadata."},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"study-specific-functions","dir":"Articles","previous_headings":"Data dictionary","what":"Study-specific functions","title":"Work with metadata","text":"convenience, can use study-specific functions require specifying study parameter:","code":"# ABCD-specific function get_dd_abcd() #> # A tibble: 83,206 × 44 #>    study domain      sub_domain source metric atlas table_name table_label name  #>    <chr> <chr>       <chr>      <chr>  <chr>  <chr> <glue>     <glue>      <glu> #>  1 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  2 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  3 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  4 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  5 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  6 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  7 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  8 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  9 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #> 10 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #> # ℹ 83,196 more rows #> # ℹ 35 more variables: label <glue>, instruction <chr>, header <chr>, #> #   note <chr>, unit <chr>, type_var <chr>, type_data <chr>, type_level <chr>, #> #   type_field <chr>, order_display <chr>, branching_logic <chr>, #> #   label_es <chr>, instruction_es <chr>, header_es <chr>, note_es <chr>, #> #   table_nda <chr>, table_nda_5_0 <chr>, table_redcap <chr>, name_nda <chr>, #> #   name_deap <chr>, name_redcap <chr>, name_redcap_exp <chr>, …  # HBCD-specific function   get_dd_hbcd(release = \"1.0\") #> # A tibble: 48,699 × 30 #>    study domain     source table_name table_label name  label instruction header #>    <chr> <chr>      <chr>  <chr>      <chr>       <chr> <chr> <chr>       <chr>  #>  1 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Spec… NA          NA     #>  2 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Nail… NA          NA     #>  3 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Numb… NA          NA     #>  4 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Spec… NA          NA     #>  5 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Any … NA          NA     #>  6 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Scre… NA          NA     #>  7 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Scre… NA          NA     #>  8 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Conf… NA          NA     #>  9 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Conf… NA          NA     #> 10 Core  BioSpecim… Biolo… bio_bm_bi… USDTL Nail… bio_… Conf… NA          NA     #> # ℹ 48,689 more rows #> # ℹ 21 more variables: note <chr>, unit <chr>, type_var <chr>, type_data <chr>, #> #   type_level <chr>, type_field <chr>, order_display <chr>, #> #   branching_logic <chr>, label_es <chr>, instruction_es <chr>, #> #   header_es <chr>, note_es <chr>, name_short <chr>, name_stata <chr>, #> #   url_table <chr>, url_warn_use <chr>, url_warn_data <chr>, #> #   url_table_warn_use <chr>, url_table_warn_data <chr>, …"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"filtering-by-variables","dir":"Articles","previous_headings":"Data dictionary","what":"Filtering by variables","title":"Work with metadata","text":"can retrieve subset data dictionary specific variables:","code":"# Get data dictionary for specific variables vars_of_interest <- c(   \"ab_g_dyn__visit_dtt\",    \"ab_g_dyn__visit_age\",    \"ab_g_stc__design_id__fam\" ) get_dd(\"abcd\", vars = vars_of_interest) #> # A tibble: 3 × 44 #>   study domain sub_domain source metric atlas table_name table_label name  label #>   <chr> <chr>  <chr>      <chr>  <chr>  <chr> <glue>     <glue>      <glu> <glu> #> 1 Core  ABCD … Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… Visi… #> 2 Core  ABCD … Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… Visi… #> 3 Core  ABCD … Standard … Gener… NA     NA    ab_g_stc   ABCD Stati… ab_g… Desi… #> # ℹ 34 more variables: instruction <chr>, header <chr>, note <chr>, unit <chr>, #> #   type_var <chr>, type_data <chr>, type_level <chr>, type_field <chr>, #> #   order_display <chr>, branching_logic <chr>, label_es <chr>, #> #   instruction_es <chr>, header_es <chr>, note_es <chr>, table_nda <chr>, #> #   table_nda_5_0 <chr>, table_redcap <chr>, name_nda <chr>, name_deap <chr>, #> #   name_redcap <chr>, name_redcap_exp <chr>, url_table <chr>, #> #   url_warn_use <chr>, url_warn_data <chr>, url_table_warn_use <chr>, …"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"filtering-by-tables","dir":"Articles","previous_headings":"Data dictionary","what":"Filtering by tables","title":"Work with metadata","text":"can also retrieve subset data dictionary specific tables:","code":"# Get data dictionary for specific tables tables_of_interest <- c(   \"ab_g_dyn\",   \"ab_g_stc\" ) get_dd_abcd(tables = tables_of_interest) #> # A tibble: 73 × 44 #>    study domain      sub_domain source metric atlas table_name table_label name  #>    <chr> <chr>       <chr>      <chr>  <chr>  <chr> <glue>     <glue>      <glu> #>  1 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  2 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  3 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  4 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  5 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  6 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  7 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  8 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  9 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #> 10 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #> # ℹ 63 more rows #> # ℹ 35 more variables: label <glue>, instruction <chr>, header <chr>, #> #   note <chr>, unit <chr>, type_var <chr>, type_data <chr>, type_level <chr>, #> #   type_field <chr>, order_display <chr>, branching_logic <chr>, #> #   label_es <chr>, instruction_es <chr>, header_es <chr>, note_es <chr>, #> #   table_nda <chr>, table_nda_5_0 <chr>, table_redcap <chr>, name_nda <chr>, #> #   name_deap <chr>, name_redcap <chr>, name_redcap_exp <chr>, …"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"levels-table","dir":"Articles","previous_headings":"","what":"Levels table","title":"Work with metadata","text":"levels table provides value labels categorical variables, showing numeric value data corresponds , well order levels. read structure levels table NBDC studies, see .","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"basic-usage-1","dir":"Articles","previous_headings":"Levels table","what":"Basic usage","title":"Work with metadata","text":"","code":"# Get levels table for ABCD Study (latest release) get_levels(\"abcd\") #> # A tibble: 63,502 × 5 #>    name                      value order_level label                    label_es #>    <glue>                    <chr>       <dbl> <chr>                    <chr>    #>  1 ab_g_dyn__cohort_edu__cgs 1               1 Up to high school (No d… NA       #>  2 ab_g_dyn__cohort_edu__cgs 2               2 High school diploma/GED  NA       #>  3 ab_g_dyn__cohort_edu__cgs 3               3 Some college             NA       #>  4 ab_g_dyn__cohort_edu__cgs 4               4 Bachelor’s degree        NA       #>  5 ab_g_dyn__cohort_edu__cgs 5               5 Graduate school or prof… NA       #>  6 ab_g_dyn__cohort_grade    0               1 Kindergarten             NA       #>  7 ab_g_dyn__cohort_grade    1               2 1st grade                NA       #>  8 ab_g_dyn__cohort_grade    2               3 2nd grade                NA       #>  9 ab_g_dyn__cohort_grade    3               4 3rd grade                NA       #> 10 ab_g_dyn__cohort_grade    4               5 4th grade                NA       #> # ℹ 63,492 more rows  # Get levels table for HBCD Study (latest release) get_levels(\"hbcd\") #> # A tibble: 17,051 × 5 #>    name                                         value order_level label label_es #>    <chr>                                        <chr>       <int> <chr> <lgl>    #>  1 bio_bm_biosample_nails_results_bio_test_ord… 1               1 Cust… NA       #>  2 bio_bm_biosample_nails_results_bio_test_ord… 2               2 Only… NA       #>  3 bio_bm_biosample_nails_results_bio_test_ord… 3               3 Canc… NA       #>  4 bio_bm_biosample_nails_results_bio_test_ord… 4               4 no r… NA       #>  5 bio_bm_biosample_nails_results_bio_c_any_sp… 1               1 posi… NA       #>  6 bio_bm_biosample_nails_results_bio_c_any_sp… 0               2 nega… NA       #>  7 bio_bm_biosample_nails_results_bio_c_any_sp… 3               3 QNS   NA       #>  8 bio_bm_biosample_nails_results_bio_c_any_st… 1               1 posi… NA       #>  9 bio_bm_biosample_nails_results_bio_c_any_st… 0               2 nega… NA       #> 10 bio_bm_biosample_nails_results_bio_c_any_st… 3               3 QNS   NA       #> # ℹ 17,041 more rows  # Get levels table for a specific release get_levels(\"abcd\", release = \"6.0\") #> # A tibble: 63,502 × 5 #>    name                      value order_level label                    label_es #>    <glue>                    <chr>       <dbl> <chr>                    <chr>    #>  1 ab_g_dyn__cohort_edu__cgs 1               1 Up to high school (No d… NA       #>  2 ab_g_dyn__cohort_edu__cgs 2               2 High school diploma/GED  NA       #>  3 ab_g_dyn__cohort_edu__cgs 3               3 Some college             NA       #>  4 ab_g_dyn__cohort_edu__cgs 4               4 Bachelor’s degree        NA       #>  5 ab_g_dyn__cohort_edu__cgs 5               5 Graduate school or prof… NA       #>  6 ab_g_dyn__cohort_grade    0               1 Kindergarten             NA       #>  7 ab_g_dyn__cohort_grade    1               2 1st grade                NA       #>  8 ab_g_dyn__cohort_grade    2               3 2nd grade                NA       #>  9 ab_g_dyn__cohort_grade    3               4 3rd grade                NA       #> 10 ab_g_dyn__cohort_grade    4               5 4th grade                NA       #> # ℹ 63,492 more rows"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"study-specific-functions-1","dir":"Articles","previous_headings":"Levels table","what":"Study-specific functions","title":"Work with metadata","text":"","code":"# ABCD-specific function get_levels_abcd(release = \"6.0\") #> # A tibble: 63,502 × 5 #>    name                      value order_level label                    label_es #>    <glue>                    <chr>       <dbl> <chr>                    <chr>    #>  1 ab_g_dyn__cohort_edu__cgs 1               1 Up to high school (No d… NA       #>  2 ab_g_dyn__cohort_edu__cgs 2               2 High school diploma/GED  NA       #>  3 ab_g_dyn__cohort_edu__cgs 3               3 Some college             NA       #>  4 ab_g_dyn__cohort_edu__cgs 4               4 Bachelor’s degree        NA       #>  5 ab_g_dyn__cohort_edu__cgs 5               5 Graduate school or prof… NA       #>  6 ab_g_dyn__cohort_grade    0               1 Kindergarten             NA       #>  7 ab_g_dyn__cohort_grade    1               2 1st grade                NA       #>  8 ab_g_dyn__cohort_grade    2               3 2nd grade                NA       #>  9 ab_g_dyn__cohort_grade    3               4 3rd grade                NA       #> 10 ab_g_dyn__cohort_grade    4               5 4th grade                NA       #> # ℹ 63,492 more rows  # HBCD-specific function get_levels_hbcd() #> # A tibble: 17,051 × 5 #>    name                                         value order_level label label_es #>    <chr>                                        <chr>       <int> <chr> <lgl>    #>  1 bio_bm_biosample_nails_results_bio_test_ord… 1               1 Cust… NA       #>  2 bio_bm_biosample_nails_results_bio_test_ord… 2               2 Only… NA       #>  3 bio_bm_biosample_nails_results_bio_test_ord… 3               3 Canc… NA       #>  4 bio_bm_biosample_nails_results_bio_test_ord… 4               4 no r… NA       #>  5 bio_bm_biosample_nails_results_bio_c_any_sp… 1               1 posi… NA       #>  6 bio_bm_biosample_nails_results_bio_c_any_sp… 0               2 nega… NA       #>  7 bio_bm_biosample_nails_results_bio_c_any_sp… 3               3 QNS   NA       #>  8 bio_bm_biosample_nails_results_bio_c_any_st… 1               1 posi… NA       #>  9 bio_bm_biosample_nails_results_bio_c_any_st… 0               2 nega… NA       #> 10 bio_bm_biosample_nails_results_bio_c_any_st… 3               3 QNS   NA       #> # ℹ 17,041 more rows"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"filtering-by-variables-andor-tables","dir":"Articles","previous_headings":"Levels table","what":"Filtering by variables and/or tables","title":"Work with metadata","text":"data dictionary, can also retrieve subset levels table specific variables tables:","code":"# Get levels for specific categorical variables get_levels(\"abcd\", vars = c(\"ab_g_dyn__visit_type\")) #> # A tibble: 3 × 5 #>   name                 value order_level label   label_es #>   <glue>               <chr>       <dbl> <chr>   <chr>    #> 1 ab_g_dyn__visit_type 1               1 On-site NA       #> 2 ab_g_dyn__visit_type 2               2 Remote  NA       #> 3 ab_g_dyn__visit_type 3               3 Hybrid  NA  # Get levels for all categorical variables in specific tables get_levels(\"abcd\", tables = \"ab_g_dyn\") #> # A tibble: 123 × 5 #>    name                         value order_level label             label_es #>    <glue>                       <chr>       <dbl> <chr>             <chr>    #>  1 ab_g_dyn__visit_type         1               1 On-site           NA       #>  2 ab_g_dyn__visit_type         2               2 Remote            NA       #>  3 ab_g_dyn__visit_type         3               3 Hybrid            NA       #>  4 ab_g_dyn__visit__day1_inform 1               1 Biological mother NA       #>  5 ab_g_dyn__visit__day1_inform 2               2 Biological father NA       #>  6 ab_g_dyn__visit__day1_inform 3               3 Adoptive mother   NA       #>  7 ab_g_dyn__visit__day1_inform 4               4 Adoptive father   NA       #>  8 ab_g_dyn__visit__day1_inform 5               5 Custodial mother  NA       #>  9 ab_g_dyn__visit__day1_inform 6               6 Custodial father  NA       #> 10 ab_g_dyn__visit__day1_inform 7               7 Grandmother       NA       #> # ℹ 113 more rows  # Get levels for a combination of specific variables and tables get_levels_abcd(vars = \"ab_g_dyn__visit_type\", tables = \"ab_g_stc\") #> # A tibble: 54 × 5 #>    name                    value order_level label    label_es #>    <glue>                  <chr>       <dbl> <chr>    <chr>    #>  1 ab_g_dyn__visit_type    1               1 On-site  NA       #>  2 ab_g_dyn__visit_type    2               2 Remote   NA       #>  3 ab_g_dyn__visit_type    3               3 Hybrid   NA       #>  4 ab_g_stc__design_famrel 0               1 Single   NA       #>  5 ab_g_stc__design_famrel 1               2 Sibling  NA       #>  6 ab_g_stc__design_famrel 2               3 Twin     NA       #>  7 ab_g_stc__design_famrel 3               4 Triplet  NA       #>  8 ab_g_stc__design_sstwin 0               1 No       NA       #>  9 ab_g_stc__design_sstwin 1               2 Yes      NA       #> 10 ab_g_stc__cohort_ethn   1               1 Hispanic NA       #> # ℹ 44 more rows"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"sessions-table","dir":"Articles","previous_headings":"","what":"Sessions table","title":"Work with metadata","text":"sessions table contains information events/session IDs part given release well labels.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"basic-usage-2","dir":"Articles","previous_headings":"Sessions table","what":"Basic usage","title":"Work with metadata","text":"","code":"# Get sessions information for ABCD Study (latest release) get_sessions(\"abcd\") #> # A tibble: 26 × 2 #>    session_id label    #>    <fct>      <fct>    #>  1 ses-00S    Screener #>  2 ses-00A    Baseline #>  3 ses-00M    0.5 Year #>  4 ses-01A    1 Year   #>  5 ses-01M    1.5 Year #>  6 ses-02A    2 Year   #>  7 ses-02M    2.5 Year #>  8 ses-03A    3 Year   #>  9 ses-03M    3.5 Year #> 10 ses-04A    4 Year   #> # ℹ 16 more rows  # Get sessions information for HBCD Study (latest release) get_sessions(\"hbcd\") #> # A tibble: 3 × 2 #>   session_id label   #>   <chr>      <chr>   #> 1 ses-V01    Visit 1 #> 2 ses-V02    Visit 2 #> 3 ses-V03    Visit 3"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"study-specific-functions-2","dir":"Articles","previous_headings":"Sessions table","what":"Study-specific functions","title":"Work with metadata","text":"","code":"# ABCD-specific function (for a specified release) get_sessions_abcd(release = \"6.0\") #> # A tibble: 26 × 2 #>    session_id label    #>    <fct>      <fct>    #>  1 ses-00S    Screener #>  2 ses-00A    Baseline #>  3 ses-00M    0.5 Year #>  4 ses-01A    1 Year   #>  5 ses-01M    1.5 Year #>  6 ses-02A    2 Year   #>  7 ses-02M    2.5 Year #>  8 ses-03A    3 Year   #>  9 ses-03M    3.5 Year #> 10 ses-04A    4 Year   #> # ℹ 16 more rows  # HBCD-specific function (for a specified release) get_sessions_hbcd(release = \"1.0\") #> # A tibble: 3 × 2 #>   session_id label   #>   <chr>      <chr>   #> 1 ses-V01    Visit 1 #> 2 ses-V02    Visit 2 #> 3 ses-V03    Visit 3"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"identifier-columns","dir":"Articles","previous_headings":"","what":"Identifier columns","title":"Work with metadata","text":"Identifier columns variables used uniquely identify observations dataset. columns essential joining data different tables. get_id_cols() function retrieves identifier columns given study.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"basic-usage-3","dir":"Articles","previous_headings":"Identifier columns","what":"Basic usage","title":"Work with metadata","text":"","code":"# Get identifier columns for ABCD Study (latest release) get_id_cols(\"abcd\") #> [1] \"participant_id\" \"session_id\"  # Get identifier columns for HBCD Study (latest release) get_id_cols(\"hbcd\") #> [1] \"participant_id\" \"session_id\"     \"run_id\""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"study-specific-functions-3","dir":"Articles","previous_headings":"Identifier columns","what":"Study-specific functions","title":"Work with metadata","text":"","code":"# ABCD-specific function (for a specified release) get_id_cols_abcd(release = \"6.0\") #> [1] \"participant_id\" \"session_id\"  # HBCD-specific function (for a specified release) get_id_cols_hbcd(release = \"1.0\") #> [1] \"participant_id\" \"session_id\"     \"run_id\""},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/metadata.html","id":"general-metadata-function","dir":"Articles","previous_headings":"","what":"General metadata function","title":"Work with metadata","text":"get_metadata() function low-level function used specific metadata functions. can use directly retrieve type metadata:","code":"# Get data dictionary (same as get_dd) get_metadata(\"abcd\", type = \"dd\", release = \"6.0\") #> # A tibble: 83,206 × 44 #>    study domain      sub_domain source metric atlas table_name table_label name  #>    <chr> <chr>       <chr>      <chr>  <chr>  <chr> <glue>     <glue>      <glu> #>  1 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  2 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  3 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  4 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  5 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  6 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  7 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  8 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #>  9 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #> 10 Core  ABCD (Gene… Standard … Gener… NA     NA    ab_g_dyn   ABCD Dynam… ab_g… #> # ℹ 83,196 more rows #> # ℹ 35 more variables: label <glue>, instruction <chr>, header <chr>, #> #   note <chr>, unit <chr>, type_var <chr>, type_data <chr>, type_level <chr>, #> #   type_field <chr>, order_display <chr>, branching_logic <chr>, #> #   label_es <chr>, instruction_es <chr>, header_es <chr>, note_es <chr>, #> #   table_nda <chr>, table_nda_5_0 <chr>, table_redcap <chr>, name_nda <chr>, #> #   name_deap <chr>, name_redcap <chr>, name_redcap_exp <chr>, …  # Get levels table (same as get_levels)   get_metadata(\"abcd\", type = \"levels\", vars = \"ab_g_dyn__visit_type\") #> # A tibble: 3 × 5 #>   name                 value order_level label   label_es #>   <glue>               <chr>       <dbl> <chr>   <chr>    #> 1 ab_g_dyn__visit_type 1               1 On-site NA       #> 2 ab_g_dyn__visit_type 2               2 Remote  NA       #> 3 ab_g_dyn__visit_type 3               3 Hybrid  NA  # Get sessions table (same as get_sessions) get_metadata(\"abcd\", type = \"sessions\") #> # A tibble: 26 × 2 #>    session_id label    #>    <fct>      <fct>    #>  1 ses-00S    Screener #>  2 ses-00A    Baseline #>  3 ses-00M    0.5 Year #>  4 ses-01A    1 Year   #>  5 ses-01M    1.5 Year #>  6 ses-02A    2 Year   #>  7 ses-02M    2.5 Year #>  8 ses-03A    3 Year   #>  9 ses-03M    3.5 Year #> 10 ses-04A    4 Year   #> # ℹ 16 more rows"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/shadow.html","id":"prepare-data","dir":"Articles","previous_headings":"","what":"Prepare data","title":"Work with shadow matrices","text":"NOTE: running code vignette, assume already read Get started page Join data vignette, know load data/shadow given NBDC study release. demonstration purposes, load simulated HBCD dataset shadow matrix included package. IMPORTANT: running shadow-related functions, important ensure dimensions main data shadow matrix match, .e., number rows columns, columns main data also present shadow matrix, identifier pairs (participant_id, session_id, run_id) exist data frames. join_tabulated() function parameter remove_empty_rows removes rows missing values default. can lead situation main data shadow matrix different dimensions, cause problems subsequent shadow-related functions. know downstream processing involves shadow matrices, make sure set parameter remove_empty_rows = FALSE calling join_tabulated(). problem using create_dataset() function, automatically sets remove_empty_rows = FALSE creating dataset shadow matrix.","code":"library(NBDCtools) #> Welcome to the `NBDCtools` package! For more information, visit: https://software.nbdc-datahub.org/NBDCtools/ #> This package is developed by the ABCD Data Analysis, Informatics & Resource Center (DAIRC) at the J. Craig Venter Institute (JCVI) data <- readRDS(   system.file(\"extdata\", \"simulated_data_hbcd.rds\", package = \"NBDCtools\") ) dplyr::glimpse(data) #> Rows: 20 #> Columns: 10 #> $ participant_id                                         <chr> \"sub-0000000003… #> $ session_id                                             <chr> \"ses-V01\", \"ses… #> $ run_id                                                 <chr> NA, NA, NA, NA,… #> $ bio_bm_biosample_nails_results_bio_test_ordered_n      <chr> \"1\", \"1\", \"2\", … #> $ mh_cg_ibqr_surg_001                                    <chr> NA, NA, NA, NA,… #> $ mh_cg_ibqr_date_taken                                  <dttm> NA, NA, NA, NA… #> $ `bio_bm_biosample_nails_results_bio_c_delta-9-thc_n`   <dbl> NA, NA, NA, NA,… #> $ bio_bm_biosample_nails_results_bio_nail_weight         <int> 76, 100, 49, NA… #> $ bio_bm_biosample_nails_results_gestational_age         <dbl> 26, 22, 37, NA,… #> $ `img_brainswipes_xcpd-T2w_AnatOnAtlasBrainSwipes_nrev` <int> NA, NA, NA, NA,…  shadow <- readRDS(   system.file(\"extdata\", \"simulated_data_hbcd_shadow.rds\", package = \"NBDCtools\") ) dplyr::glimpse(shadow) #> Rows: 20 #> Columns: 10 #> $ participant_id                                         <chr> \"sub-0000000003… #> $ session_id                                             <chr> \"ses-V01\", \"ses… #> $ run_id                                                 <chr> NA, NA, NA, NA,… #> $ bio_bm_biosample_nails_results_bio_test_ordered_n      <chr> NA, NA, NA, NA,… #> $ mh_cg_ibqr_surg_001                                    <chr> \"Reason 1\", \"Re… #> $ mh_cg_ibqr_date_taken                                  <chr> \"Reason 2\", \"Re… #> $ `bio_bm_biosample_nails_results_bio_c_delta-9-thc_n`   <chr> \"Reason 1\", \"Re… #> $ bio_bm_biosample_nails_results_bio_nail_weight         <chr> NA, NA, NA, \"Re… #> $ bio_bm_biosample_nails_results_gestational_age         <chr> NA, NA, NA, \"Re… #> $ `img_brainswipes_xcpd-T2w_AnatOnAtlasBrainSwipes_nrev` <chr> \"Reason 3\", \"Re…"},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/shadow.html","id":"using-a-provided-shadow-matrix","dir":"Articles","previous_headings":"Bind shadow matrix to main data","what":"Using a provided shadow matrix","title":"Work with shadow matrices","text":"data frame shadow matrix, can bind main data using shadow_bind_data() function. function bind shadow matrix data using identifier columns (participant_id, session_id, run_id default). appended shadow columns column names corresponding columns main data, suffix (_shadow default). rows identifier pairs main data don’t exist shadow matrix, appended shadow matrix rows filled NA values. rows identifier pairs shadow matrix don’t exist main data, rows dropped resulting data frame.","code":"shadow_bind_data(   data = data,   shadow = shadow ) |>    dplyr::glimpse() #> Rows: 20 #> Columns: 17 #> $ participant_id                                                <chr> \"sub-000… #> $ session_id                                                    <chr> \"ses-V01… #> $ run_id                                                        <chr> NA, NA, … #> $ bio_bm_biosample_nails_results_bio_test_ordered_n             <chr> \"1\", \"1\"… #> $ mh_cg_ibqr_surg_001                                           <chr> NA, NA, … #> $ mh_cg_ibqr_date_taken                                         <dttm> NA, NA,… #> $ `bio_bm_biosample_nails_results_bio_c_delta-9-thc_n`          <dbl> NA, NA, … #> $ bio_bm_biosample_nails_results_bio_nail_weight                <int> 76, 100,… #> $ bio_bm_biosample_nails_results_gestational_age                <dbl> 26, 22, … #> $ `img_brainswipes_xcpd-T2w_AnatOnAtlasBrainSwipes_nrev`        <int> NA, NA, … #> $ bio_bm_biosample_nails_results_bio_test_ordered_n_shadow      <chr> NA, NA, … #> $ mh_cg_ibqr_surg_001_shadow                                    <chr> \"Reason … #> $ mh_cg_ibqr_date_taken_shadow                                  <chr> \"Reason … #> $ `bio_bm_biosample_nails_results_bio_c_delta-9-thc_n_shadow`   <chr> \"Reason … #> $ bio_bm_biosample_nails_results_bio_nail_weight_shadow         <chr> NA, NA, … #> $ bio_bm_biosample_nails_results_gestational_age_shadow         <chr> NA, NA, … #> $ `img_brainswipes_xcpd-T2w_AnatOnAtlasBrainSwipes_nrev_shadow` <chr> \"Reason …"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/shadow.html","id":"using-a-naniar-shadow-matrix","dir":"Articles","previous_headings":"Bind shadow matrix to main data","what":"Using a naniar shadow matrix","title":"Work with shadow matrices","text":"shadow matrix provided, like ABCD data, wish use provided shadow matrix, can create shadow matrix using naniar R package. , set naniar_shadow = TRUE. IMPORTANT: naniar dependency NBDCtools package, need install separately. can using following command: create shadow matrix using naniar, can use following command: downside approach shadow matrix contain reasons missing values, indicate value missing. benefit using naniar_shadow = TRUE can use functionality naniar R package explore visualize missingness data (see details).","code":"if (!requireNamespace(\"naniar\", quietly = TRUE)) {   install.packages(\"naniar\") } shadow_bind_data(   data = data,   shadow = NULL, # no shadow matrix provided   naniar_shadow = TRUE ) |>    dplyr::glimpse() #> Rows: 20 #> Columns: 17 #> $ participant_id                                            <chr> \"sub-0000000… #> $ session_id                                                <chr> \"ses-V01\", \"… #> $ run_id                                                    <chr> NA, NA, NA, … #> $ bio_bm_biosample_nails_results_bio_test_ordered_n         <chr> \"1\", \"1\", \"2… #> $ mh_cg_ibqr_surg_001                                       <chr> NA, NA, NA, … #> $ mh_cg_ibqr_date_taken                                     <dttm> NA, NA, NA,… #> $ `bio_bm_biosample_nails_results_bio_c_delta-9-thc_n`      <dbl> NA, NA, NA, … #> $ bio_bm_biosample_nails_results_bio_nail_weight            <int> 76, 100, 49,… #> $ bio_bm_biosample_nails_results_gestational_age            <dbl> 26, 22, 37, … #> $ `img_brainswipes_xcpd-T2w_AnatOnAtlasBrainSwipes_nrev`    <int> NA, NA, NA, … #> $ bio_bm_biosample_nails_results_bio_test_ordered_n_NA      <fct> !NA, !NA, !N… #> $ mh_cg_ibqr_surg_001_NA                                    <fct> NA, NA, NA, … #> $ mh_cg_ibqr_date_taken_NA                                  <fct> NA, NA, NA, … #> $ `bio_bm_biosample_nails_results_bio_c_delta-9-thc_n_NA`   <fct> NA, NA, NA, … #> $ bio_bm_biosample_nails_results_bio_nail_weight_NA         <fct> !NA, !NA, !N… #> $ bio_bm_biosample_nails_results_gestational_age_NA         <fct> !NA, !NA, !N… #> $ `img_brainswipes_xcpd-T2w_AnatOnAtlasBrainSwipes_nrev_NA` <fct> NA, NA, NA, …"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/shadow.html","id":"fix-missing-values-in-the-shadow-matrix","dir":"Articles","previous_headings":"","what":"Fix missing values in the shadow matrix","title":"Work with shadow matrices","text":"Joining shadow matrices different tables using join_tabulated() can result missing values shadow matrix certain observations (e.g., one instrument administered time points another, participant complete certain instrument). missing values shadow matrix mistakenly interpreted indicating main data values cells. indeed cells missing main data shadow matrix. simplified example scenario: binding two tables together, get following result: can see missing values (NA) var3 var4 columns sub-002/ses-002/run-002 row var1 var2 columns sub-003/ses-003/run-003 row. table shadow matrix, indicate values cells main data, reality shadow matrix just missing values due joining two tables. fix issue, can use shadow_replace_binding_missing() function, replace NA values shadow matrix custom value (default \"Missing due joining\"). simulated shadow matrix cases shadow matrix NA values due joining. demonstration, manually convert values NA: Now can use shadow_replace_binding_missing() function replace NA values shadow matrix indicator: can see, mh_cg_ibqr_surg_001 column now \"Missing due joining\" values. IMPORTANT: Unlike shadow_bind_data() unmatched rows main data shadow matrix allowed, function requires dimensions data shadow matrix match, .e., number rows columns. match, function throw error.","code":"my_table1 <- dplyr::tibble(   participant_id = c(\"sub-001\", \"sub-002\"),   session_id = c(\"ses-001\", \"ses-002\"),   run_id = c(\"run-001\", \"run-002\"),   var1 = c(\"reason1\", NA),   var2 = c(NA, \"reason2\") ) my_table1 #> # A tibble: 2 × 5 #>   participant_id session_id run_id  var1    var2    #>   <chr>          <chr>      <chr>   <chr>   <chr>   #> 1 sub-001        ses-001    run-001 reason1 NA      #> 2 sub-002        ses-002    run-002 NA      reason2  my_table2 <- dplyr::tibble(   participant_id = c(\"sub-001\", \"sub-003\"),   session_id = c(\"ses-001\", \"ses-003\"),   run_id = c(\"run-001\", \"run-003\"),   var3 = c(NA, \"reason3\"),   var4 = c(\"reason4\", NA) ) my_table2 #> # A tibble: 2 × 5 #>   participant_id session_id run_id  var3    var4    #>   <chr>          <chr>      <chr>   <chr>   <chr>   #> 1 sub-001        ses-001    run-001 NA      reason4 #> 2 sub-003        ses-003    run-003 reason3 NA id_table <- dplyr::full_join(   dplyr::select(my_table1, participant_id, session_id, run_id),   dplyr::select(my_table2, participant_id, session_id, run_id) ) #> Joining with `by = join_by(participant_id, session_id, run_id)` dplyr::left_join(id_table, my_table1) |>    dplyr::left_join(my_table2)  #> Joining with `by = join_by(participant_id, session_id, run_id)` #> Joining with `by = join_by(participant_id, session_id, run_id)` #> # A tibble: 3 × 7 #>   participant_id session_id run_id  var1    var2    var3    var4    #>   <chr>          <chr>      <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 sub-001        ses-001    run-001 reason1 NA      NA      reason4 #> 2 sub-002        ses-002    run-002 NA      reason2 NA      NA      #> 3 sub-003        ses-003    run-003 NA      NA      reason3 NA shadow$mh_cg_ibqr_surg_001 #>  [1] \"Reason 1\" \"Reason 1\" \"Reason 1\" \"Reason 1\" \"Reason 1\" \"Reason 1\" #>  [7] \"Reason 1\" \"Reason 1\" \"Reason 1\" \"Reason 1\" \"Reason 1\" \"Reason 1\" #> [13] \"Reason 1\" NA         \"Reason 1\" \"Reason 1\" \"Reason 1\" \"Reason 1\" #> [19] \"Reason 1\" \"Reason 1\" # set them to NA shadow$mh_cg_ibqr_surg_001[1:5] <- NA_character_ shadow$mh_cg_ibqr_surg_001 #>  [1] NA         NA         NA         NA         NA         \"Reason 1\" #>  [7] \"Reason 1\" \"Reason 1\" \"Reason 1\" \"Reason 1\" \"Reason 1\" \"Reason 1\" #> [13] \"Reason 1\" NA         \"Reason 1\" \"Reason 1\" \"Reason 1\" \"Reason 1\" #> [19] \"Reason 1\" \"Reason 1\" shadow_replace_binding_missing(   data = data,   shadow = shadow ) #> # A tibble: 20 × 10 #>    participant_id session_id run_id bio_bm_biosample_nails…¹ mh_cg_ibqr_surg_001 #>    <chr>          <chr>      <chr>  <chr>                    <chr>               #>  1 sub-0000000003 ses-V01    NA     NA                       Missing due to joi… #>  2 sub-0000000004 ses-V01    NA     NA                       Missing due to joi… #>  3 sub-0000000003 ses-V02    NA     NA                       Missing due to joi… #>  4 sub-0000000005 ses-V01    NA     NA                       Missing due to joi… #>  5 sub-0000000002 ses-V02    1      NA                       Missing due to joi… #>  6 sub-0000000009 ses-V01    NA     Reason 3                 Reason 1            #>  7 sub-0000000020 ses-V02    NA     NA                       Reason 1            #>  8 sub-0000000013 ses-V01    NA     NA                       Reason 1            #>  9 sub-0000000016 ses-V02    NA     NA                       Reason 1            #> 10 sub-0000000014 ses-V01    NA     NA                       Reason 1            #> 11 sub-0000000015 ses-V02    1      NA                       Reason 1            #> 12 sub-0000000011 ses-V02    NA     NA                       Reason 1            #> 13 sub-0000000017 ses-V02    1      NA                       Reason 1            #> 14 sub-0000000007 ses-V01    NA     NA                       NA                  #> 15 sub-0000000006 ses-V01    NA     NA                       Reason 1            #> 16 sub-0000000018 ses-V01    NA     NA                       Reason 1            #> 17 sub-0000000019 ses-V02    2      NA                       Reason 1            #> 18 sub-0000000008 ses-V01    NA     NA                       Reason 1            #> 19 sub-0000000010 ses-V01    NA     NA                       Reason 1            #> 20 sub-0000000012 ses-V03    NA     NA                       Reason 1            #> # ℹ abbreviated name: ¹​bio_bm_biosample_nails_results_bio_test_ordered_n #> # ℹ 5 more variables: mh_cg_ibqr_date_taken <chr>, #> #   `bio_bm_biosample_nails_results_bio_c_delta-9-thc_n` <chr>, #> #   bio_bm_biosample_nails_results_bio_nail_weight <chr>, #> #   bio_bm_biosample_nails_results_gestational_age <chr>, #> #   `img_brainswipes_xcpd-T2w_AnatOnAtlasBrainSwipes_nrev` <chr>"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/transformation.html","id":"prepare-data","dir":"Articles","previous_headings":"","what":"Prepare data","title":"Transform data","text":"NOTE: running code vignette, assume already read Get started vignette Join data vignette, know load data given NBDC study release. demonstrate transformation functions, load simulated ABCD dataset included package.","code":"library(NBDCtools) #> Welcome to the `NBDCtools` package! For more information, visit: https://software.nbdc-datahub.org/NBDCtools/ #> This package is developed by the ABCD Data Analysis, Informatics & Resource Center (DAIRC) at the J. Craig Venter Institute (JCVI) data <- readRDS(   system.file(\"extdata\", \"simulated_data_abcd.rds\", package = \"NBDCtools\") ) dplyr::glimpse(data) #> Rows: 10 #> Columns: 10 #> $ participant_id                    <chr> \"sub-0000000006\", \"sub-0000000007\", … #> $ session_id                        <chr> \"ses-04A\", \"ses-05A\", \"ses-02A\", \"se… #> $ ab_g_dyn__visit_type              <chr> \"3\", \"1\", \"1\", \"1\", \"3\", \"3\", \"2\", \"… #> $ ab_g_dyn__cohort_grade            <chr> \"9\", \"6\", NA, \"7\", \"8\", NA, \"8\", \"8\"… #> $ ab_g_dyn__visit__day1_dt          <date> 2020-10-19, 2022-05-19, 2022-09-12,… #> $ ab_g_stc__gen_pc__01              <dbl> -0.022995395, 0.006506271, 0.0039703… #> $ ab_g_dyn__visit_age               <dbl> 11.63836, 13.18630, 10.11475, 10.114… #> $ ab_g_dyn__visit_days              <int> 1, 1, 2, 1, 1, 1, 2, 2, 1, 2 #> $ mr_y_qc__raw__dmri__r01__series_t <chr> NA, NA, NA, \"11:05:35\", \"15:47:35\", … #> $ ab_g_dyn__visit_dtt               <dttm> 2022-05-19 13:01:00, 2019-02-17 09:2…"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/transformation.html","id":"convert-categorical-columns-to-factors","dir":"Articles","previous_headings":"","what":"Convert categorical columns to factors","title":"Transform data","text":"looking simulated data, can see categorical columns like ab_g_dyn__visit_type type “character”. can use transf_factor() function convert columns type “factor” correct type categorical variables R. transf_factor() function automatically detects categorical columns converts ordered unordered factors based specification data dictionary levels table given study.","code":"data_transf <- data |>   transf_factor(study = \"abcd\") dplyr::glimpse(data_transf) #> Rows: 10 #> Columns: 10 #> $ participant_id                    <chr> \"sub-0000000006\", \"sub-0000000007\", … #> $ session_id                        <fct> ses-04A, ses-05A, ses-02A, ses-01A, … #> $ ab_g_dyn__visit_type              <fct> 3, 1, 1, 1, 3, 3, 2, 3, 2, 1 #> $ ab_g_dyn__cohort_grade            <ord> 9, 6, NA, 7, 8, NA, 8, 8, 8, NA #> $ ab_g_dyn__visit__day1_dt          <date> 2020-10-19, 2022-05-19, 2022-09-12, … #> $ ab_g_stc__gen_pc__01              <dbl> -0.022995395, 0.006506271, 0.0039703… #> $ ab_g_dyn__visit_age               <dbl> 11.63836, 13.18630, 10.11475, 10.11… #> $ ab_g_dyn__visit_days              <int> 1, 1, 2, 1, 1, 1, 2, 2, 1, 2 #> $ mr_y_qc__raw__dmri__r01__series_t <chr> NA, NA, NA, \"11:05:35\", \"15:47:35\", … #> $ ab_g_dyn__visit_dtt               <dttm> 2022-05-19 13:01:00, 2019-02-17 09:2…"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/transformation.html","id":"apply-variable-and-value-labels","dir":"Articles","previous_headings":"","what":"Apply variable and value labels","title":"Transform data","text":"Next, can add variable value labels dataset. inspect variable labels, can use sjlabelled::get_label() function: inspect value labels, can use sjlabelled::get_labels() function: labeling done incorrectly, can simply rerun transf_label() function fix . want remove labels, can use","code":"data_transf <- data_transf |>    transf_label(study = \"abcd\") sjlabelled::get_label(data_transf) #>                                                                    participant_id  #>                                                          \"Participant identifier\"  #>                                                                        session_id  #>                                                                \"Event identifier\"  #>                                                              ab_g_dyn__visit_type  #>                    \"Visit information: Type of visit (In-person, remote, hybrid)\"  #>                                                            ab_g_dyn__cohort_grade  #> \"Cohort description: Current school grade [Cross-listed: ab_p_demo__ed__yth_001]\"  #>                                                          ab_g_dyn__visit__day1_dt  #>                                           \"Visit information (day 1): Visit date\"  #>                                                              ab_g_stc__gen_pc__01  #>                         \"Genetics: First principal component of genetic ancestry\"  #>                                                               ab_g_dyn__visit_age  #>                        \"Visit information: Youth's age at the start of the event\"  #>                                                              ab_g_dyn__visit_days  #>                                         \"Visit information: Number of visit days\"  #>                                                 mr_y_qc__raw__dmri__r01__series_t  #>                                              \"Diffusion MRI (run 1): Series time\"  #>                                                               ab_g_dyn__visit_dtt  #>                      \"Visit information: Date and time at the start of the visit\" sjlabelled::get_labels(data_transf, attr.only = TRUE, values = \"n\") #> $participant_id #> NULL #>  #> $session_id #>    ses-00S    ses-01A    ses-02A    ses-03A    ses-04A    ses-05A  #> \"Screener\"   \"1 Year\"   \"2 Year\"   \"3 Year\"   \"4 Year\"   \"5 Year\"  #>  #> $ab_g_dyn__visit_type #>         1         2         3  #> \"On-site\"  \"Remote\"  \"Hybrid\"  #>  #> $ab_g_dyn__cohort_grade #>                        0                        1                       10  #>           \"Kindergarten\"              \"1st grade\"             \"10th grade\"  #>                       11                       12                       13  #>             \"11th grade\"             \"12th grade\"                \"College\"  #>                       14                        2                        3  #> \"Not enrolled in school\"              \"2nd grade\"              \"3rd grade\"  #>                        4                        5                        6  #>              \"4th grade\"              \"5th grade\"              \"6th grade\"  #>                        7                        8                        9  #>              \"7th grade\"              \"8th grade\"              \"9th grade\"  #>  #> $ab_g_dyn__visit__day1_dt #> NULL #>  #> $ab_g_stc__gen_pc__01 #> NULL #>  #> $ab_g_dyn__visit_age #> NULL #>  #> $ab_g_dyn__visit_days #> NULL #>  #> $mr_y_qc__raw__dmri__r01__series_t #> NULL #>  #> $ab_g_dyn__visit_dtt #> NULL data_labels_removed <- sjlabelled::remove_all_labels(data_transf)  sjlabelled::get_label(data_labels_removed) #>                    participant_id                        session_id  #>                                \"\"                                \"\"  #>              ab_g_dyn__visit_type            ab_g_dyn__cohort_grade  #>                                \"\"                                \"\"  #>          ab_g_dyn__visit__day1_dt              ab_g_stc__gen_pc__01  #>                                \"\"                                \"\"  #>               ab_g_dyn__visit_age              ab_g_dyn__visit_days  #>                                \"\"                                \"\"  #> mr_y_qc__raw__dmri__r01__series_t               ab_g_dyn__visit_dtt  #>                                \"\"                                \"\" sjlabelled::get_labels(data_labels_removed, attr.only = TRUE, values = \"n\") #> $participant_id #> NULL #>  #> $session_id #> NULL #>  #> $ab_g_dyn__visit_type #> NULL #>  #> $ab_g_dyn__cohort_grade #> NULL #>  #> $ab_g_dyn__visit__day1_dt #> NULL #>  #> $ab_g_stc__gen_pc__01 #> NULL #>  #> $ab_g_dyn__visit_age #> NULL #>  #> $ab_g_dyn__visit_days #> NULL #>  #> $mr_y_qc__raw__dmri__r01__series_t #> NULL #>  #> $ab_g_dyn__visit_dtt #> NULL"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/transformation.html","id":"convert-time-columns-to-hms-format","dir":"Articles","previous_headings":"","what":"Convert time columns to hms format","title":"Transform data","text":"Time columns dataset (e.g. mr_y_qc__raw__dmri__r01__series_t) formatted character strings \"HH:MM:SS\" default. want convert columns hms format, can use transf_time_to_hms() function: can see, column type converted character time (hms) class.","code":"data_transf <- data_transf |>    transf_time_to_hms(study = \"abcd\") dplyr::glimpse(data_transf) #> Rows: 10 #> Columns: 10 #> $ participant_id                    <chr> \"sub-0000000006\", \"sub-0000000007\", … #> $ session_id                        <fct> ses-04A, ses-05A, ses-02A, ses-01A, … #> $ ab_g_dyn__visit_type              <fct> 3, 1, 1, 1, 3, 3, 2, 3, 2, 1 #> $ ab_g_dyn__cohort_grade            <ord> 9, 6, NA, 7, 8, NA, 8, 8, 8, NA #> $ ab_g_dyn__visit__day1_dt          <date> 2020-10-19, 2022-05-19, 2022-09-12, … #> $ ab_g_stc__gen_pc__01              <dbl> -0.022995395, 0.006506271, 0.0039703… #> $ ab_g_dyn__visit_age               <dbl> 11.63836, 13.18630, 10.11475, 10.11… #> $ ab_g_dyn__visit_days              <int> 1, 1, 2, 1, 1, 1, 2, 2, 1, 2 #> $ mr_y_qc__raw__dmri__r01__series_t <time>       NA,       NA,       NA, 11:05:… #> $ ab_g_dyn__visit_dtt               <dttm> 2022-05-19 13:01:00, 2019-02-17 09:2…"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/transformation.html","id":"convert-categorical-column-levels-to-labels","dir":"Articles","previous_headings":"","what":"Convert categorical column levels to labels","title":"Transform data","text":"cases, creating plots, useful convert categorical values labels. can use transf_value_to_label() function : NOTE: running function, make sure data transformed transf_factor() transf_label() functions, variable value labels available.","code":"data_transf |>    transf_value_to_label() #> # A tibble: 10 × 10 #>    participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>    <chr>          <fct>      <fct>                <fct>                  #>  1 sub-0000000006 ses-04A    Hybrid               9th grade              #>  2 sub-0000000007 ses-05A    On-site              6th grade              #>  3 sub-0000000001 ses-02A    On-site              NA                     #>  4 sub-0000000003 ses-01A    On-site              7th grade              #>  5 sub-0000000010 ses-04A    Hybrid               8th grade              #>  6 sub-0000000008 ses-03A    Hybrid               NA                     #>  7 sub-0000000004 ses-04A    Remote               8th grade              #>  8 sub-0000000009 ses-00S    Hybrid               8th grade              #>  9 sub-0000000005 ses-01A    Remote               8th grade              #> 10 sub-0000000002 ses-03A    On-site              NA                     #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <time>, #> #   ab_g_dyn__visit_dtt <dttm>"},{"path":"https://software.nbdc-datahub.org/NBDCtools/articles/transformation.html","id":"convert-missing-codes-to-na","dir":"Articles","previous_headings":"","what":"Convert missing codes to NA","title":"Transform data","text":"ABCD HBCD Study datasets, categorical columns use specific codes denote missingness/non-responses (e.g., \"999\" “Don’t know” \"777\" “Decline answer”). want remove values analysis, can use transf_value_to_na() function convert codes NA. NOTE: default, function converts standard categorical missingness codes (\"222\" \"999\") NA. ABCD Study, codes consistenly used throughout whole dataset; HBCD Study, however, columns may use different codes non-responses missing values. Please refer data dictionary levels table specific study see codes convert. simulated dataset contain categorical missingness codes. However, function provides custom parameter missing_codes specify codes converted NA. example, want convert categorical values \"1\" \"2\" NA, can use: ab_g_dyn__visit_type column, can see values \"1\" \"2\" converted NA. function another parameter, ignore_col_pattern, can used ignore specific columns, exempt conversion. parameter accepts regular expression pattern, meaning columns match pattern ignored. example, can ignore columns start ab_g_dyn__visit using:","code":"data_transf |>    transf_value_to_na() #> # A tibble: 10 × 10 #>    participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>    <chr>          <fct>      <fct>                <ord>                  #>  1 sub-0000000006 ses-04A    3                    9                      #>  2 sub-0000000007 ses-05A    1                    6                      #>  3 sub-0000000001 ses-02A    1                    NA                     #>  4 sub-0000000003 ses-01A    1                    7                      #>  5 sub-0000000010 ses-04A    3                    8                      #>  6 sub-0000000008 ses-03A    3                    NA                     #>  7 sub-0000000004 ses-04A    2                    8                      #>  8 sub-0000000009 ses-00S    3                    8                      #>  9 sub-0000000005 ses-01A    2                    8                      #> 10 sub-0000000002 ses-03A    1                    NA                     #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <time>, #> #   ab_g_dyn__visit_dtt <dttm> data_transf |>    transf_value_to_na(missing_codes = c(\"1\", \"2\")) #> # A tibble: 10 × 10 #>    participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>    <chr>          <fct>      <fct>                <ord>                  #>  1 sub-0000000006 ses-04A    3                    9                      #>  2 sub-0000000007 ses-05A    NA                   6                      #>  3 sub-0000000001 ses-02A    NA                   NA                     #>  4 sub-0000000003 ses-01A    NA                   7                      #>  5 sub-0000000010 ses-04A    3                    8                      #>  6 sub-0000000008 ses-03A    3                    NA                     #>  7 sub-0000000004 ses-04A    NA                   8                      #>  8 sub-0000000009 ses-00S    3                    8                      #>  9 sub-0000000005 ses-01A    NA                   8                      #> 10 sub-0000000002 ses-03A    NA                   NA                     #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <time>, #> #   ab_g_dyn__visit_dtt <dttm> data_transf |>    transf_value_to_na(ignore_col_pattern = \"^ab_g_dyn__visit\") #> # A tibble: 10 × 10 #>    participant_id session_id ab_g_dyn__visit_type ab_g_dyn__cohort_grade #>    <chr>          <fct>      <fct>                <ord>                  #>  1 sub-0000000006 ses-04A    3                    9                      #>  2 sub-0000000007 ses-05A    1                    6                      #>  3 sub-0000000001 ses-02A    1                    NA                     #>  4 sub-0000000003 ses-01A    1                    7                      #>  5 sub-0000000010 ses-04A    3                    8                      #>  6 sub-0000000008 ses-03A    3                    NA                     #>  7 sub-0000000004 ses-04A    2                    8                      #>  8 sub-0000000009 ses-00S    3                    8                      #>  9 sub-0000000005 ses-01A    2                    8                      #> 10 sub-0000000002 ses-03A    1                    NA                     #> # ℹ 6 more variables: ab_g_dyn__visit__day1_dt <date>, #> #   ab_g_stc__gen_pc__01 <dbl>, ab_g_dyn__visit_age <dbl>, #> #   ab_g_dyn__visit_days <int>, mr_y_qc__raw__dmri__r01__series_t <time>, #> #   ab_g_dyn__visit_dtt <dttm>"},{"path":"https://software.nbdc-datahub.org/NBDCtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Janosch Linkersdoerfer. Author, maintainer. Le Zhang. Author.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Linkersdoerfer J, Zhang L (2025). NBDCtools: NIH Brain Development Cohorts (NBDC) Data Hub Tools. R package version 1.0.0, https://software.nbdc-datahub.org/NBDCtools/.","code":"@Manual{,   title = {NBDCtools: NIH Brain Development Cohorts (NBDC) Data Hub Tools},   author = {Janosch Linkersdoerfer and Le Zhang},   year = {2025},   note = {R package version 1.0.0},   url = {https://software.nbdc-datahub.org/NBDCtools/}, }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/index.html","id":"nbdctools","dir":"","previous_headings":"","what":"NIH Brain Development Cohorts (NBDC) Data Hub Tools","title":"NIH Brain Development Cohorts (NBDC) Data Hub Tools","text":"R package provides functions working data released NIH Brain Development Cohorts (NBDC) Data Hub, currently offers data ABCD HBCD studies. NBDCtools package designed help researchers data analysts create analysis-ready datasets tabulated data released ABCD HBCD studies. core functionality join selected variables /entire tables tabulated data files single data frame memory. Additionally, package offers several functions assist users working data, including: Transformation functions convert categorical columns (ordered unordered) factors based data dictionary levels table, add variable value labels dataset. Filter/subsetting functions filter set participant/events, filter ABCD events using shorthands, exclude rows columns missing data. Functions retrieve utilize metadata studies. set utility functions various use cases.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"NIH Brain Development Cohorts (NBDC) Data Hub Tools","text":"IMPORTANT: Besides NBDCtools main package, users also need install accompanying NBDCtoolsData package, contains large data dictionary levels tables used NBDCtools package. install latest version packages GitHub, use following command: additional dependencies installed default, needed specific features, processing shadow matrices. install dependencies, use following command: install specific version package, specify version number remotes::install_github() call. example, install version 1.0.0, use following command: NOTE: NBDCtoolsData package version match NBDCtools package version, .e., two package follow different release cycles. example, NBDCtools package may changed across ABCD/HBCD data releases, NBDCtoolsData package updated data release. Therefore, recommended always update data package latest version. package dependencies installed default, needed specific features, processing shadow matrices. install dependencies, use following command:","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") }    remotes::install_github(\"nbdc-datahub/NBDCtools\") remotes::install_github(\"nbdc-datahub/NBDCtoolsData\") remotes::install_github(\"nbdc-datahub/NBDCtools\", dependencies = TRUE) remotes::install_github(\"nbdc-datahub/NBDCtools@v1.0.0\") remotes::install_github(\"nbdc-datahub/NBDCtoolsData@v1.0.0\") # for shadow_bind_data function install.packages(\"naniar\")"},{"path":"https://software.nbdc-datahub.org/NBDCtools/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"NIH Brain Development Cohorts (NBDC) Data Hub Tools","text":"general overview use R package handle NBDC datasets, see Get Started page. browse documentation available functions, see Reference page. detailed information different categories functions, refer vignettes.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"NIH Brain Development Cohorts (NBDC) Data Hub Tools","text":"encounter issues using package, please report submitting GitHub issue. Please submit issues related ABCD HBCD data resources (see information report issues data resource).","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"NIH Brain Development Cohorts (NBDC) Data Hub Tools","text":"currently preparing paper NBDCtools. reference added paper published.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/NBDCtools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"NBDCtools: NBDCtools: NBDC Data Hub Tools — NBDCtools-package","title":"NBDCtools: NBDCtools: NBDC Data Hub Tools — NBDCtools-package","text":"package provides functions work data NBDC Data Hub.","code":""},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/NBDCtools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"NBDCtools: NBDCtools: NBDC Data Hub Tools — NBDCtools-package","text":"Maintainer: Janosch Linkersdoerfer dairc.service@gmail.com (ORCID) Authors: Le Zhang lezhang100@gmail.com (ORCID)","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/benchmark_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmark Models — benchmark_models","title":"Benchmark Models — benchmark_models","text":"Benchmark Models","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/benchmark_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmark Models — benchmark_models","text":"","code":"benchmark_models"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/benchmark_models.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Benchmark Models — benchmark_models","text":"list benchmark models estimate time memory usage loading data. time_small: model estimating time small datasets (n_var < 1000). time_large: model estimating time larger datasets (n_var >= 1000). ram: model estimating RAM usage based number variables. Internal use : dataset used internally functions used package vignettes. intended direct use end user.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert column names in a data frame — convert_names_data","title":"Convert column names in a data frame — convert_names_data","text":"function renames columns data frame another type column name specified data dictionary. example, can used convert ABCD column names introduced 6.0 release previously used column names. instead want convert column names file, use convert_names_file(). Note: Please use function caution make sure data converted column equivalent data original column. Also, please make sure names can mapped one--one. variables ABCD data dictionary collapsed previous releases thus might multiple names name_to column map single name (see skip_sep_check argument ).","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert column names in a data frame — convert_names_data","text":"","code":"convert_names_data(   data,   dd,   name_from = \"name\",   name_to,   ignore_cols = union(get_id_cols_abcd(), get_id_cols_hbcd()),   skip_sep_check = FALSE )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert column names in a data frame — convert_names_data","text":"data tibble. input data frame columns renamed. dd tibble. data dictionary table. One can use get_dd() family functions get data dictionary given study release provide custom data dictionary. name_from character. column name type data dictionary columns data currently use (Default: \"name\"). column must exist data dictionary. name_to character. column name type data dictionary columns data renamed . column must exist data dictionary. ignore_cols character vector. columns ignore (Default: identifier columns used ABCD HBCD). skip_sep_check logical. Whether skip check name_to column's separators validation. official data dictionaries, columns multiple names separated \"|\" cell. columns multiple names, recommended use functions like tidyr::separate_rows() split names multiple rows decide name use renaming filtering rows, name_from name_to columns one--one mapping. skip_sep_check = FALSE (default), function check name_from name_to columns \"|\" separator throw error separator found. skip_sep_check = TRUE, means understand character strings \"|\" inside used rename mapping, function check separator.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert column names in a data frame — convert_names_data","text":"tibble. data renamed column names.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert column names in a data frame — convert_names_data","text":"","code":"if (FALSE) { # \\dontrun{ # rename columns to previous ABCD names used by NDA convert_names_data(   data,   dd = get_dd(\"abcd\"),   name_from = \"name\",   name_to = \"name_nda\" )  # rename columns to Stata names convert_names_data(   data,   dd = get_dd(\"abcd\"),   name_from = \"name\",   name_to = \"name_stata\" ) } # }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert column names in a file — convert_names_file","title":"Convert column names in a file — convert_names_file","text":"function replaces matched column names file another type column name specified data dictionary. example, function can used convert script files specified previously used column names ABCD column names introduced 6.0 release. instead want convert column names data frame, use convert_names_data(). Note: Please use function caution make sure data converted column equivalent data original column. Also, please make sure names can mapped one--one. variables ABCD data dictionary collapsed previous releases thus might multiple names name_from column map single name (see skip_sep_check argument ).","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert column names in a file — convert_names_file","text":"","code":"convert_names_file(   file_in,   file_out = NULL,   dd,   name_from,   name_to,   skip_sep_check = FALSE )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert column names in a file — convert_names_file","text":"file_in character. input file path. file_out character. output file path. provided, defaults input file path \"_converted\" suffix. dd tibble. data dictionary table. One can use get_dd() family functions get data dictionary given study release provide custom data dictionary. name_from character. column name type data dictionary columns data currently use (Default: \"name\"). column must exist data dictionary. name_to character. column name type data dictionary columns data renamed . column must exist data dictionary. skip_sep_check logical. Whether skip check name_from name_to columns' separators validation. official data dictionaries, columns multiple names separated \"|\" cell. columns multiple names, recommended use functions like tidyr::separate_rows() split names multiple rows decide name use renaming filtering rows, name_from name_to columns one--one mapping. skip_sep_check = FALSE (default), function check name_from name_to columns \"|\" separator throw error separator found. skip_sep_check = TRUE, means understand character strings \"|\" inside used rename mapping, function check separator.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert column names in a file — convert_names_file","text":"character. path output file converted names, invisible.","code":""},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_file.html","id":"word-matching","dir":"Reference","previous_headings":"","what":"Word matching","title":"Convert column names in a file — convert_names_file","text":"function uses word boundaries match names file. Uses regex word boundaries (\\\\b) ensure exact word matches. prevents partial matches within larger words. example, matching \"age\" match \"cage\" \"page\".","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_file.html","id":"speed","dir":"Reference","previous_headings":"","what":"Speed","title":"Convert column names in a file — convert_names_file","text":"data dictionary big get_dd(), function loop names data dictionary. names replace, best trim data dictionary names using function.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/convert_names_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert column names in a file — convert_names_file","text":"","code":"if (FALSE) { # \\dontrun{ convert_names_file(   file_in = \"analysis_script.R\",   dd = get_dd(\"abcd\"),   name_from = \"name_nda\",   name_to = \"name\" )  # Specify custom output file convert_names_file(   file_in = \"analysis_script.py\",   file_out = \"analysis_script_new.py\",   dd = get_dd(\"abcd\"),   name_from = \"name_nda\",   name_to = \"name\" ) } # }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_bids_sidecar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create BIDS sidecar — create_bids_sidecar","title":"Create BIDS sidecar — create_bids_sidecar","text":"Creates Brain Imaging Data Structure (BIDS) JSON sidecar file metadata (data dictionary levels table). Returns JSON object writes file.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_bids_sidecar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create BIDS sidecar — create_bids_sidecar","text":"","code":"create_bids_sidecar(   data,   study,   release = \"latest\",   var_coding = \"values\",   metadata_description = \"Dataset exported using NBDCtools\",   path_out = NULL,   pretty = TRUE )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_bids_sidecar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create BIDS sidecar — create_bids_sidecar","text":"data tibble. raw data data labels, see transf_label(). data labelled, function try label data first. study character. NBDC study (One \"abcd\" \"hbcd\") release character. Release version (Default: \"latest\"). var_coding character. variable coding, one \"values\", \"labels\". data processed transf_value_to_label(), please use \"labels\". metadata_description string, description metadata path_out character. path output file. NULL, function return json object. pretty logical. Whether pretty print json.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_bids_sidecar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create BIDS sidecar — create_bids_sidecar","text":"json object path json file","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_bids_sidecar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create BIDS sidecar — create_bids_sidecar","text":"","code":"if (FALSE) { # \\dontrun{ data |> create_bids_sidecar() data |> create_bids_sidecar(path_out = \"data.json\") } # }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dataset — create_dataset","title":"Create a dataset — create_dataset","text":"high-level function simplifies process creating dataset ABCD HBCD Study data allowing users create analysis-ready dataset single step. executes lower-level functions provided NBDCtools package sequence load, join, transform data. function expects study data stored one .parquet .tsv file per database table within specified directory, provided dir_data. Variables specified vars tables full-joined together, variables specified vars_add tables_add left-joined variables. details, see join_tabulated(). addition main create_dataset() function, two study-specific variations: create_dataset_abcd(): ABCD study. create_dataset_hbcd(): HBCD study. arguments create_dataset() function, except study argument set respective study default, set user.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dataset — create_dataset","text":"","code":"create_dataset(   dir_data,   study,   vars = NULL,   tables = NULL,   vars_add = NULL,   tables_add = NULL,   release = \"latest\",   format = \"parquet\",   bypass_ram_check = FALSE,   categ_to_factor = TRUE,   add_labels = TRUE,   value_to_label = FALSE,   value_to_na = FALSE,   time_to_hms = FALSE,   bind_shadow = FALSE,   ... )  create_dataset_abcd(...)  create_dataset_hbcd(...)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dataset — create_dataset","text":"dir_data character. Path directory data files .parquet .tsv format. study character. NBDC study (One \"abcd\" \"hbcd\"). vars character (vector). Name(s) variable(s) joined. (Default: NULL, .e., variables selected; one tables vars provided). tables character (vector). Name(s) table(s) joined (Default: NULL, .e., tables selected; one tables vars provided). vars_add character (vector). Name(s) additional variable(s) left-joined variables selected vars tables (Default: NULL, .e., additional variables selected) tables_add character (vector). Name(s) additional table(s) left-joined variables selected vars tables (Default: NULL, .e., additional tables selected) release character. Release version (Default: \"latest\") format character. Data format (One \"parquet\" \"tsv\"; default: \"parquet\"). bypass_ram_check logical. TRUE, function abort number variables exceeds 10000 current available RAM less 75% estimated RAM usage. can prevent long loading time data, failing middle due insufficient RAM. large datasets, recommended save 2 times estimated RAM running function. argument used ABCD study, HBCD data small enough loaded without RAM issues personal computers. HBCD data grows future, may change. categ_to_factor logical. Whether convert categorical variables factors class, see transf_factor() (Default: TRUE). add_labels logical. Whether adds variable value labels variables, see transf_label() (Default: TRUE). value_to_label logical. Whether convert categorical variables' numeric values labels, see transf_value_to_label() (Default: FALSE). run process, categ_to_factor add_labels must TRUE. value_to_na logical. Whether convert categorical missingness/non-response codes NA, see transf_value_to_na() (Default: FALSE). run process, categ_to_factor add_labels must TRUE. time_to_hms logical. Whether convert time variables hms class, see transf_time_to_hms() (Default: FALSE). bind_shadow logical. Whether bind shadow matrix dataset (Default: FALSE). See details. ... additional arguments passed downstream functions join_tabulated() step. See examples details.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dataset — create_dataset","text":"tibble analysis-ready dataset.","code":""},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_dataset.html","id":"order","dir":"Reference","previous_headings":"","what":"Order","title":"Create a dataset — create_dataset","text":"high-level function executes different steps following order: Read data/shadow matrix using join_tabulated(). Convert categorical variables factors using transf_factor(). Add labels variables values using transf_label(). Convert categorical variables' numeric values labels using transf_value_to_label(). Convert categorical missingness/non-response codes NA using transf_value_to_na(). Convert time variables hms class using transf_time_to_hms(). bind_shadow study \"HBCD\", replace missing values shadow due joining multiple datasets using shadow_replace_binding_missing(). Bind shadow matrix data using shadow_bind_data(). steps executed default. order represents maximal order execution.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_dataset.html","id":"bind-shadow","dir":"Reference","previous_headings":"","what":"bind_shadow","title":"Create a dataset — create_dataset","text":"bind_shadow TRUE, shadow matrix added data using shadow_bind_data(). HBCD study: HBCD study, function uses shadow matrix dir_data directory default (HBCD Study releases _shadow.parquet/_shadow.tsv file per table accompanies data). Alternatively, one can set naniar_shadow = TRUE part ... arguments use naniar::as_shadow() create shadow matrix data. ABCD study: ABCD Study currently release shadow matrices. bind_shadow set TRUE, function create shadow matrix data using naniar::as_shadow(); extra naniar_shadow = TRUE argument needed.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/create_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dataset — create_dataset","text":"","code":"if (FALSE) { # \\dontrun{ # most common use case create_dataset(   dir_data = \"6_0/data\",   study = \"abcd\",   vars = c(\"var1\", \"var2\", \"var3\") )  # to handle with tagged missingness create_dataset(   dir_data = \"1_0/data\",   study = \"hbcd\",   vars = c(\"var1\", \"var2\", \"var3\"),   value_to_na = TRUE )  # to bind shadow matrices to the data create_dataset(   dir_data = \"1_0/data/\",   study = \"hbcd\",   vars = c(\"var1\", \"var2\", \"var3\"),   bind_shadow = TRUE )  # to use the additional arguments # for example in `value_to_na` option, the underlying function # `transf_value_to_na()` has 2 more arguments, # which can be passed to the `create_dataset()` function create_dataset(   dir_data = \"6_0/data\",   study = \"abcd\",   vars = c(\"var1\", \"var2\", \"var3\"),   value_to_na = TRUE,   missing_codes = c(\"999\", \"888\", \"777\", \"666\", \"555\", \"444\", \"333\", \"222\"),   ignore_col_pattern = \"__dk$|__dk__l$\" )  # use study specific functions create_dataset_abcd(   dir_data = \"6_0/data\",   vars = c(\"var1\", \"var2\", \"var3\") ) } # }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_empty_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter empty columns — filter_empty_cols","title":"Filter empty columns — filter_empty_cols","text":"function filters columns empty.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_empty_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter empty columns — filter_empty_cols","text":"","code":"filter_empty_cols(   data,   id_cols = union(get_id_cols_abcd(), get_id_cols_hbcd()) )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_empty_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter empty columns — filter_empty_cols","text":"data tibble. data filtered. id_cols character (vector). names ID columns excluded filtering (Default: identifier columns used ABCD HBCD).","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_empty_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter empty columns — filter_empty_cols","text":"tibble filtered data.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_empty_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter empty columns — filter_empty_cols","text":"","code":"data <- tibble::tibble(   participant_id = c(\"sub-001\", \"sub-002\", \"sub-003\"),   session_id = c(\"ses-001\", \"ses-001\", \"ses-002\"),   var1 = c(NA, NA, NA),   var2 = c(NA, NA, 2),   var3 = c(NA, NA, 3) ) filter_empty_cols(data) #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_empty_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter empty rows — filter_empty_rows","title":"Filter empty rows — filter_empty_rows","text":"function filters rows empty","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_empty_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter empty rows — filter_empty_rows","text":"","code":"filter_empty_rows(   data,   id_cols = union(get_id_cols_abcd(), get_id_cols_hbcd()) )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_empty_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter empty rows — filter_empty_rows","text":"data tibble. data filtered. id_cols character (vector). names ID columns excluded filtering (Default: identifier columns used ABCD HBCD).","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_empty_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter empty rows — filter_empty_rows","text":"tibble filtered data.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_empty_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter empty rows — filter_empty_rows","text":"","code":"data <- tibble::tibble(   participant_id = c(\"sub-001\", \"sub-002\", \"sub-003\"),   session_id = c(\"ses-001\", \"ses-001\", \"ses-002\"),   var1 = c(NA, NA, 1),   var2 = c(NA, NA, 2),   var3 = c(NA, NA, 3) ) filter_empty_rows(data) #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_events_abcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter ABCD events — filter_events_abcd","title":"Filter ABCD events — filter_events_abcd","text":"Given (set ) condition(s), filters events included ABCD dataset. Conditions can specified vector strings, string can one following conditions: \"core\": events ABCD core study \"annual\": annual events ABCD core study \"mid_year\": mid-year events ABCD core study \"substudy\": events ABCD substudies \"covid\": events COVID substudy \"sdev\": events Social Development substudy \"even\": even-numbered events \"odd\": odd-numbered events numerical expressions like >2 <=5 filter events number string used filter session_id column conditions can combined logical \"\" \"\".","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_events_abcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter ABCD events — filter_events_abcd","text":"","code":"filter_events_abcd(data, conditions, connect = \"and\")"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_events_abcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter ABCD events — filter_events_abcd","text":"data tibble. data filtered. conditions character (vector). events keep. connect character. Whether connect conditions \"\" (event retained conditions met; default) \"\" (event retained condition met).","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_events_abcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter ABCD events — filter_events_abcd","text":"tibble filtered data.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_events_abcd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter ABCD events — filter_events_abcd","text":"","code":"data <- tibble::tribble(   ~session_id,     ~study,     ~type,   \"ses-00S\",       \"core\",     \"screener\",   \"ses-00M\",       \"core\",     \"mid-year\",   \"ses-00A\",       \"core\",     \"even\",   \"ses-01M\",       \"core\",     \"mid-year\",   \"ses-01A\",       \"core\",     \"odd\",   \"ses-02M\",       \"core\",     \"mid-year\",   \"ses-02A\",       \"core\",     \"even\",   \"ses-03M\",       \"core\",     \"mid-year\",   \"ses-03A\",       \"core\",     \"odd\",   \"ses-04M\",       \"core\",     \"mid-year\",   \"ses-04A\",       \"core\",     \"even\",   \"ses-05M\",       \"core\",     \"mid-year\",   \"ses-05A\",       \"core\",     \"odd\",   \"ses-06M\",       \"core\",     \"mid-year\",   \"ses-06A\",       \"core\",     \"even\",   \"ses-C01\",       \"substudy\", \"covid\",   \"ses-C02\",       \"substudy\", \"covid\",   \"ses-C03\",       \"substudy\", \"covid\",   \"ses-C04\",       \"substudy\", \"covid\",   \"ses-C05\",       \"substudy\", \"covid\",   \"ses-C06\",       \"substudy\", \"covid\",   \"ses-C07\",       \"substudy\", \"covid\",   \"ses-S01\",       \"substudy\", \"sdev\",   \"ses-S02\",       \"substudy\", \"sdev\",   \"ses-S03\",       \"substudy\", \"sdev\",   \"ses-S04\",       \"substudy\", \"sdev\",   \"ses-S05\",       \"substudy\", \"sdev\" )  # ABCD core study events filter_events_abcd(data, c(\"core\")) #> # A tibble: 15 × 3 #>    session_id study type     #>    <chr>      <chr> <chr>    #>  1 ses-00S    core  screener #>  2 ses-00M    core  mid-year #>  3 ses-00A    core  even     #>  4 ses-01M    core  mid-year #>  5 ses-01A    core  odd      #>  6 ses-02M    core  mid-year #>  7 ses-02A    core  even     #>  8 ses-03M    core  mid-year #>  9 ses-03A    core  odd      #> 10 ses-04M    core  mid-year #> 11 ses-04A    core  even     #> 12 ses-05M    core  mid-year #> 13 ses-05A    core  odd      #> 14 ses-06M    core  mid-year #> 15 ses-06A    core  even      # COVID substudy events filter_events_abcd(data, c(\"covid\")) #> # A tibble: 7 × 3 #>   session_id study    type  #>   <chr>      <chr>    <chr> #> 1 ses-C01    substudy covid #> 2 ses-C02    substudy covid #> 3 ses-C03    substudy covid #> 4 ses-C04    substudy covid #> 5 ses-C05    substudy covid #> 6 ses-C06    substudy covid #> 7 ses-C07    substudy covid  # imaging events filter_events_abcd(data, c(\"annual\", \"even\")) #> # A tibble: 4 × 3 #>   session_id study type  #>   <chr>      <chr> <chr> #> 1 ses-00A    core  even  #> 2 ses-02A    core  even  #> 3 ses-04A    core  even  #> 4 ses-06A    core  even   # mid-years before year 5 filter_events_abcd(data, c(\"mid_year\", \"<5\")) #> # A tibble: 5 × 3 #>   session_id study type     #>   <chr>      <chr> <chr>    #> 1 ses-00M    core  mid-year #> 2 ses-01M    core  mid-year #> 3 ses-02M    core  mid-year #> 4 ses-03M    core  mid-year #> 5 ses-04M    core  mid-year  # COVID or Social Development substudy events filter_events_abcd(data, c(\"covid\", \"sdev\"), connect = \"or\") #> # A tibble: 12 × 3 #>    session_id study    type  #>    <chr>      <chr>    <chr> #>  1 ses-C01    substudy covid #>  2 ses-C02    substudy covid #>  3 ses-C03    substudy covid #>  4 ses-C04    substudy covid #>  5 ses-C05    substudy covid #>  6 ses-C06    substudy covid #>  7 ses-C07    substudy covid #>  8 ses-S01    substudy sdev  #>  9 ses-S02    substudy sdev  #> 10 ses-S03    substudy sdev  #> 11 ses-S04    substudy sdev  #> 12 ses-S05    substudy sdev"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_id_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter ID/events — filter_id_events","title":"Filter ID/events — filter_id_events","text":"Given vector ID/events (concatenated like \"{participant_id}_{session_id}\"), dataframe participant_id session_id columns, function filters data keep alternatively remove rows given ID/events.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_id_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter ID/events — filter_id_events","text":"","code":"filter_id_events(data, id_events, revert = FALSE)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_id_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter ID/events — filter_id_events","text":"data tibble. data filtered. id_events character (vector) dataframe. (Vector ) ID/event(s) dataframe participant_id session_id columns. revert logical. Whether revert filter, .e., keep rows matching id_events (Default: FALSE, .e., keep rows matching id_events).","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_id_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter ID/events — filter_id_events","text":"tibble filtered data.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/filter_id_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter ID/events — filter_id_events","text":"","code":"data <- tibble::tribble(   ~participant_id, ~session_id,   \"sub-001\",       \"ses-001\",   \"sub-001\",       \"ses-002\",   \"sub-002\",       \"ses-001\",   \"sub-002\",       \"ses-002\",   \"sub-003\",       \"ses-001\",   \"sub-003\",       \"ses-002\" )  # filter using a vector of ID/events filter_id_events(   data,   id_events = c(\"sub-001_ses-001\", \"sub-003_ses-002\") ) #> # A tibble: 2 × 2 #>   participant_id session_id #>   <chr>          <chr>      #> 1 sub-001        ses-001    #> 2 sub-003        ses-002     # filter using a dataframe with participant_id and session_id data_filter <- tibble::tibble(   participant_id = c(\"sub-001\", \"sub-003\"),   session_id = c(\"ses-001\", \"ses-002\") ) filter_id_events(   data,   id_events = data_filter ) #> # A tibble: 2 × 2 #>   participant_id session_id #>   <chr>          <chr>      #> 1 sub-001        ses-001    #> 2 sub-003        ses-002     # revert filter filter_id_events(   data,   id_events = c(\"sub-001_ses-001\", \"sub-003_ses-002\"),   revert = TRUE ) #> # A tibble: 4 × 2 #>   participant_id session_id #>   <chr>          <chr>      #> 1 sub-001        ses-002    #> 2 sub-002        ses-001    #> 3 sub-002        ses-002    #> 4 sub-003        ses-001"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_dd.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data dictionary — get_dd","title":"Get data dictionary — get_dd","text":"Retrieves data dictionary given study release version. Allows filtering variables tables. Wrapper around get_metadata(). addition main get_dd() function, two study-specific variations: get_dd_abcd(): ABCD study. get_dd_hbcd(): HBCD study. arguments get_dd() function, except study argument set respective study default, set user.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data dictionary — get_dd","text":"","code":"get_dd(study, release = \"latest\", vars = NULL, tables = NULL)  get_dd_abcd(...)  get_dd_hbcd(...)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_dd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data dictionary — get_dd","text":"study character. study name. One \"abcd\" \"hbcd\". release character. Release version (Default: \"latest\"). vars character (vector). Vector names variables included. tables character (vector). Vector names tables included. ... Additional arguments passed underlying get_dd() function.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_dd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data dictionary — get_dd","text":"Data frame data dictionary.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_dd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data dictionary — get_dd","text":"","code":"get_dd(\"abcd\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_dd(\"hbcd\", release = \"1.0\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_dd(\"abcd\", vars = c(\"ab_g_dyn__visit_dtt\", \"ab_g_dyn__visit_age\")) #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_dd(\"abcd\", tables = \"ab_g_dyn\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_dd_abcd() #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_dd_hbcd(release = \"1.0\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_id_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get identifier columns — get_id_cols","title":"Get identifier columns — get_id_cols","text":"Retrieves identifier columns given study release version. addition main get_id_cols() function, two study-specific variations: get_id_cols_abcd(): ABCD study. get_id_cols_hbcd(): HBCD study. arguments get_id_cols() function, except study argument set respective study default, set user.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_id_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get identifier columns — get_id_cols","text":"","code":"get_id_cols(study, release = \"latest\")  get_id_cols_abcd(...)  get_id_cols_hbcd(...)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_id_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get identifier columns — get_id_cols","text":"study character. study name. One \"abcd\" \"hbcd\". release character. Release version (Default: \"latest\"). ... Additional arguments passed underlying get_id_cols() function.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_id_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get identifier columns — get_id_cols","text":"character vector identifier columns.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_id_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get identifier columns — get_id_cols","text":"","code":"get_id_cols(\"abcd\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_id_cols(\"hbcd\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_id_cols_abcd(release = \"6.0\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_id_cols_hbcd(release = \"1.0\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get levels table — get_levels","title":"Get levels table — get_levels","text":"Retrieves levels table given study release version. Allows filtering variables tables. Wrapper around get_metadata(). addition main get_levels() function, two study-specific variations: get_levels_abcd(): ABCD study. get_levels_hbcd(): HBCD study. arguments get_levels() function, except study argument set respective study default, set user.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get levels table — get_levels","text":"","code":"get_levels(study, release = \"latest\", vars = NULL, tables = NULL)  get_levels_abcd(...)  get_levels_hbcd(...)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get levels table — get_levels","text":"study character. study name. One \"abcd\" \"hbcd\". release character. Release version (Default: \"latest\"). vars character (vector). Vector names variables included. tables character (vector). Vector names tables included. ... Additional arguments passed underlying get_levels() function.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get levels table — get_levels","text":"Data frame levels table.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get levels table — get_levels","text":"","code":"get_levels(\"abcd\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_levels(\"hbcd\", release = \"1.0\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_levels(\"abcd\", vars = c(\"ab_g_dyn__visit_type\")) #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_levels(\"abcd\", tables = \"ab_g_dyn\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_levels_abcd(release = \"6.0\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_levels_hbcd() #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata — get_metadata","title":"Get metadata — get_metadata","text":"Retrieves metadata (data dictionary, levels table, event map) given study release version. Allows filtering variables tables.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata — get_metadata","text":"","code":"get_metadata(   study,   release = \"latest\",   vars = NULL,   tables = NULL,   type = \"dd\" )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata — get_metadata","text":"study character. study name. One \"abcd\" \"hbcd\". release character. Release version (Default: \"latest\"). vars character (vector). Vector names variables included. tables character (vector). Vector names tables included. type character. Type metadata retrieve. One \"dd\", \"levels\", \"sessions\" (Default: \"dd\").","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata — get_metadata","text":"Data frame metadata.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata — get_metadata","text":"","code":"get_metadata(\"abcd\", type = \"levels\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_metadata(\"hbcd\", release = \"1.0\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_metadata(\"abcd\", vars = c(\"ab_g_dyn__visit_dtt\", \"ab_g_dyn__visit_age\")) #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_metadata(\"abcd\", tables = \"ab_g_dyn\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_metadata(\"abcd\", tables = \"ab_g_dyn\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_metadata(\"abcd\", type = \"sessions\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_sessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sessions table — get_sessions","title":"Get sessions table — get_sessions","text":"Retrieves sessions table given study release version. Wrapper around get_metadata(). addition main get_sessions() function, two study-specific variations: get_sessions_abcd(): ABCD study. get_sessions_hbcd(): HBCD study. arguments get_sessions() function, except study argument set respective study default, set user.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_sessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sessions table — get_sessions","text":"","code":"get_sessions(study, release = \"latest\")  get_sessions_abcd(...)  get_sessions_hbcd(...)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_sessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sessions table — get_sessions","text":"study character. study name. One \"abcd\" \"hbcd\". release character. Release version (Default: \"latest\"). ... Additional arguments passed underlying get_sessions() function.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_sessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sessions table — get_sessions","text":"Data frame sessions table.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_sessions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get sessions table — get_sessions","text":"","code":"get_sessions(\"abcd\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_sessions(\"hbcd\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_sessions_abcd(release = \"6.0\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  get_sessions_hbcd(release = \"1.0\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_url_deap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DEAP ontology URL — get_url_deap","title":"Get DEAP ontology URL — get_url_deap","text":"Retrieves URL position DEAP ontology tree. Allows specify hierarchy order (including removing hierarchy levels) single multiple end node(s) show selected (filter data dictionary table) URL opened.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_url_deap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DEAP ontology URL — get_url_deap","text":"","code":"get_url_deap(   nodes,   order,   study,   encode = TRUE,   as_link = TRUE,   link_type = \"md\",   link_name = NULL )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_url_deap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DEAP ontology URL — get_url_deap","text":"nodes list character vectors (length 2). list parent node & end node pairs nodes selected. order character vector. order hierarchy levels display ontology tree following list: \"study\" \"domain\" \"sub_domain\" (ABCD) \"source\" \"metric\" (ABCD) \"atlas\" (ABCD) study character. name NBDC study (one \"abcd\" \"hbcd\"). encode logical. Whether encode URL (Default: TRUE). FALSE, argument as_link must also FALSE. as_link logical. Whether return URL formatted hyperlink (Default: TRUE). link_type character. type hyperlink return (one \"md\", default, \"html\"). link_name character. name use hyperlink (Default: NULL, .e., URL used name)","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_url_deap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get DEAP ontology URL — get_url_deap","text":"character. URL hyperlink selected node(s) study.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_url_deap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get DEAP ontology URL — get_url_deap","text":"","code":"NBDCtools:::get_url_deap(   nodes = list(c(\"Standard Variables\", \"General\")),   order = c(\"study\", \"domain\", \"sub_domain\", \"source\", \"metric\", \"atlas\"),   study = \"abcd\",   link_name = \"ABCD 'Standard Variables' (standard order; Markdown link)\" ) #> Error in get(data_name, envir = asNamespace(\"NBDCtools\")): object 'lst_dds' not found NBDCtools:::get_url_deap(   nodes = list(     c(\"Imaging\", \"Desikan\"),     c(\"Imaging\", \"Destrieux\")   ),   order = c(\"study\", \"domain\", \"atlas\", \"sub_domain\", \"metric\"),   study = \"abcd\",   link_type = \"html\",   link_name = \"Desikan & Destrieux atlases (custom order; HTML link)\" ) #> Error in get(data_name, envir = asNamespace(\"NBDCtools\")): object 'lst_dds' not found NBDCtools:::get_url_deap(   nodes = list(c(\"BioSpecimens\", \"Biological Mother\")),   order = c(\"study\", \"domain\", \"source\"),   study = \"hbcd\",   as_link = FALSE # just return the URL, not a link ) #> Error in get(data_name, envir = asNamespace(\"NBDCtools\")): object 'lst_dds' not found"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_url_deap_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DEAP ontology URL for a specific table — get_url_deap_table","title":"Get DEAP ontology URL for a specific table — get_url_deap_table","text":"Wrapper around get_url_deap() get URL open specific table DEAP ontology tree. addition main get_url_deap_table() function, two study-specific variations: get_url_deap_table_abcd(): ABCD study. get_url_deap_table_hbcd(): HBCD study. arguments get_url_deap_table() function, except study argument set respective study default, set user.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_url_deap_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DEAP ontology URL for a specific table — get_url_deap_table","text":"","code":"get_url_deap_table(   table,   study,   as_link = TRUE,   link_type = \"md\",   link_name = \"name\" )  get_url_deap_table_abcd(...)  get_url_deap_table_hbcd(...)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_url_deap_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DEAP ontology URL for a specific table — get_url_deap_table","text":"table character. table name (table_name data dictionary). study character. name NBDC study (one \"abcd\" \"hbcd\"). as_link logical. Whether return URL formatted hyperlink (Default: TRUE). link_type character. type hyperlink return (one \"md\", default, \"html\"). link_name character. name use hyperlink (one \"name\", .e., use table name, \"label\", .e., use table label). ... Additional arguments passed underlying get_url_deap_table() function.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_url_deap_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get DEAP ontology URL for a specific table — get_url_deap_table","text":"character. URL hyperlink specified table.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/get_url_deap_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get DEAP ontology URL for a specific table — get_url_deap_table","text":"","code":"NBDCtools:::get_url_deap_table(\"ab_g_dyn\", \"abcd\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  NBDCtools:::get_url_deap_table(\"par_visit_data\", \"hbcd\", link_name = \"label\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  NBDCtools:::get_url_deap_table_abcd(\"ab_g_dyn\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))  NBDCtools:::get_url_deap_table_hbcd(\"par_visit_data\", link_name = \"label\") #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/join_by_identifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Join by identifier set — join_by_identifier","title":"Join by identifier set — join_by_identifier","text":"Internal helper join_tabulated() joins requested variables tables given (set ) identifier column(s).","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/join_by_identifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join by identifier set — join_by_identifier","text":"","code":"join_by_identifier(   dir_data,   dd,   identifiers,   format = \"parquet\",   shadow = FALSE )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/join_by_identifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join by identifier set — join_by_identifier","text":"dir_data character. Path directory data files .parquet .tsv format. dd tibble. Data frame data dictionary. identifiers character (vector). Identifier column(s). format character. Data format (One \"parquet\" \"tsv\"; default: \"parquet\"). shadow logical. Whether join shadow matrix instead data table (default: FALSE).","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/join_by_identifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join by identifier set — join_by_identifier","text":"tibble joined variables given (set ) identifier column(s).","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/join_tabulated.html","id":null,"dir":"Reference","previous_headings":"","what":"Join tabulated data — join_tabulated","title":"Join tabulated data — join_tabulated","text":"Joins selected variables /whole tables tabulated data/shadow files single data frame. Expects data files stored one directory .parquet .tsv format, one file per table following naming convention respective NBDC dataset (ABCD HBCD studies). Typically, rawdata/phenotype/ directory within BIDS dataset downloaded NBDC Data Hub. Variables specified vars tables full-joined together, .e., rows kept, even value columns. Variables specified vars_add left-joined variables selected vars tables, .e., values already existing rows added new rows created. useful adding variables dataset important given analysis main variables interest (e.g., design/nesting demographic information). left-joining variables, one avoids creating new rows contain missing values main variables interest selected using vars tables. variables specified vars/tables vars_add/tables_add, variables vars_add/tables_add ignored. addition main join_tabulated() function, two study-specific variations: join_tabulated_abcd(): ABCD study. join_tabulated_hbcd(): HBCD study. arguments join_tabulated() function, except study argument set respective study default, set user.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/join_tabulated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join tabulated data — join_tabulated","text":"","code":"join_tabulated(   dir_data,   study,   vars = NULL,   tables = NULL,   vars_add = NULL,   tables_add = NULL,   release = \"latest\",   format = \"parquet\",   shadow = FALSE,   remove_empty_rows = TRUE,   bypass_ram_check = FALSE )  join_tabulated_abcd(...)  join_tabulated_hbcd(...)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/join_tabulated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join tabulated data — join_tabulated","text":"dir_data character. Path directory data files .parquet .tsv format. study character. NBDC study (One \"abcd\" \"hbcd\"). vars character (vector). Name(s) variable(s) joined. (Default: NULL, .e., variables selected; one tables vars provided). tables character (vector). Name(s) table(s) joined (Default: NULL, .e., tables selected; one tables vars provided). vars_add character (vector). Name(s) additional variable(s) left-joined variables selected vars tables (Default: NULL, .e., additional variables selected) tables_add character (vector). Name(s) additional table(s) left-joined variables selected vars tables (Default: NULL, .e., additional tables selected) release character. Release version (Default: \"latest\") format character. Data format (One \"parquet\" \"tsv\"; default: \"parquet\"). shadow logical. Whether join shadow matrix instead data table (default: FALSE). remove_empty_rows logical. Whether filter rows values missing joined variables, except ID columns (default: TRUE). bypass_ram_check logical. TRUE, function abort number variables exceeds 10000 current available RAM less 75% estimated RAM usage. can prevent long loading time data, failing middle due insufficient RAM. large datasets, recommended save 2 times estimated RAM running function. argument used ABCD study, HBCD data small enough loaded without RAM issues personal computers. HBCD data grows future, may change. ... Additional arguments passed underlying function join_tabulated() Note: Turning parameter FALSE useful shadow matrices processing. shadow-related functions expect shadow matrix dimensions original data proceed correctly. See shadow_bind_data() shadow_replace_binding_missing()","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/join_tabulated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join tabulated data — join_tabulated","text":"tibble data shadow matrix joined variables.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/join_tabulated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join tabulated data — join_tabulated","text":"","code":"if (FALSE) { # \\dontrun{ join_tabulated(   dir_data = \"path/to/data/\",   vars     = c(\"var_1\", \"var_2\", \"var_3\"),   tables   = c(\"table_1\", \"table_2\"),   study    = \"abcd\",   release  = \"6.0\" ) } # }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/read_dsv_formatted.html","id":null,"dir":"Reference","previous_headings":"","what":"Read delimiter (tab/comma) separated values file correctly formatted — read_dsv_formatted","title":"Read delimiter (tab/comma) separated values file correctly formatted — read_dsv_formatted","text":"Reads .tsv .csv file correctly formatted column types. Uses readr::read_tsv()/readr::read_csv() internally specifies column types explicitly using col_types argument utilizing information data dictionary. Returns identifier columns columns specified data dictionary, .e., columns file specified data dictionary ignored.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/read_dsv_formatted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read delimiter (tab/comma) separated values file correctly formatted — read_dsv_formatted","text":"","code":"read_dsv_formatted(file, dd, action = \"warn\")"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/read_dsv_formatted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read delimiter (tab/comma) separated values file correctly formatted — read_dsv_formatted","text":"file character. Path .tsv .csv file. dd tibble. Data dictionary specifying column types. columns specified data dictionary read. action character. columns file specified data dictionary (One \"warn\", \"error\", \"ignore\"; default: \"warn\").","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/read_dsv_formatted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read delimiter (tab/comma) separated values file correctly formatted — read_dsv_formatted","text":"tibble data/shadow matrix read .tsv .csv file.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/read_dsv_formatted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read delimiter (tab/comma) separated values file correctly formatted — read_dsv_formatted","text":"IMPORTANT: readr::read_tsv()/readr::read_csv() (like commands load text files R programming languages) default infers column types data. always work perfectly. example, may interpret column integers double, column dates character. Sometimes column may even read completely empty , default, readr::read_tsv()/readr::read_csv() considers first 1000 rows inferring data type interprets column empty logical vector rows empty. NBDC datasets store categorical data integers formatted character. default, readr::read_tsv()/readr::read_csv() may interpret numeric. specifying column types explicitly based defined data dictionary, can avoid issues. GENERAL RECOMMENDATION: file formats like .parquet correctly store column types need handled explicitly. also offer advantages like faster reading speed smaller file sizes. , formats generally preferred .tsv/.csv files. However, work .tsv/.csv files, function can help avoid common pitfalls.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/read_dsv_formatted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read delimiter (tab/comma) separated values file correctly formatted — read_dsv_formatted","text":"","code":"if (FALSE) { # \\dontrun{ dd <- NBDCtools::get_dd(\"abcd\", \"6.0\") read_tsv_formatted(\"path/to/file.tsv\", dd) } # }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read file — read_file","title":"Read file — read_file","text":"Internal helper join_by_identifier() reads data/shadow matrix given file either .parquet .tsv format.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read file — read_file","text":"","code":"read_file(file, dd, format)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read file — read_file","text":"file character. Path file. dd tibble. Data frame data dictionary used select columns determine column types reading .tsv file. format character. Data format (One \"parquet\" \"tsv\")","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read file — read_file","text":"tibble data/shadow matrix file.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_bind_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind the shadow matrix to the data — shadow_bind_data","title":"Bind the shadow matrix to the data — shadow_bind_data","text":"function binds shadow matrix data.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_bind_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind the shadow matrix to the data — shadow_bind_data","text":"","code":"shadow_bind_data(   data,   shadow = NULL,   naniar_shadow = FALSE,   id_cols = union(get_id_cols_abcd(), get_id_cols_hbcd()),   suffix = \"_shadow\" )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_bind_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind the shadow matrix to the data — shadow_bind_data","text":"data tibble. data. shadow tibble. shadow matrix. naniar_shadow TRUE, argument ignored. naniar_shadow logical. Whether use naniar::as_shadow() create shadow matrix data instead providing argument. id_cols character. columns join (identifier column(s)) data shadow matrices (Default: identifier columns used ABCD HBCD). naniar_shadow = TRUE, columns included shadow matrix. suffix character. suffix add shadow columns. Default \"_shadow\". example, column name \"var1\" suffix \"_shadow\", resulted column name \"var1_shadow\". naniar_shadow = TRUE, suffix _NA, suffix compatibility functions naniar package.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_bind_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind the shadow matrix to the data — shadow_bind_data","text":"dataframe data matrix shadow columns. 2x size original data matrix.","code":""},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_bind_data.html","id":"data-requirements","dir":"Reference","previous_headings":"","what":"Data requirements","title":"Bind the shadow matrix to the data — shadow_bind_data","text":"naniar_shadow = FASLE shadow provided, two dataframes must columns, order columns matter, ID columns must dataframes. extra rows shadow matrix, ignored.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_bind_data.html","id":"abcd-and-hbcd-data","dir":"Reference","previous_headings":"","what":"ABCD and HBCD data","title":"Bind the shadow matrix to the data — shadow_bind_data","text":"NBDC releases HBCD data shadow matrices, can used shadow argument. work ABCD data, option now use naniar_shadow = TRUE, create shadow matrix data using naniar::as_shadow().","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_bind_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind the shadow matrix to the data — shadow_bind_data","text":"","code":"shadow <- tibble::tibble(   participant_id = c(\"1\", \"2\", \"3\"),   session_id = c(\"1\", \"2\", \"3\"),   var1 = c(\"Unknown\", NA, NA),   var2 = c(\"Wish not to answer\", NA, NA) ) data <- tibble::tibble(   participant_id = c(\"1\", \"2\", \"3\"),   session_id = c(\"1\", \"2\", \"3\"),   var1 = c(NA, NA, 1),   var2 = c(NA, 2, NA) ) shadow_bind_data(data, shadow) #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\")) if (FALSE) { # \\dontrun{ shadow_bind_data(data, naniar_shadow = TRUE) } # }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_replace_binding_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix binding resulted missingness in shadow matrices — shadow_replace_binding_missing","title":"Fix binding resulted missingness in shadow matrices — shadow_replace_binding_missing","text":"function replaces missing values shadow matrices. done checking values shadow matrices NA. , value shadow matrix replaced Missing due joining.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_replace_binding_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix binding resulted missingness in shadow matrices — shadow_replace_binding_missing","text":"","code":"shadow_replace_binding_missing(   data,   shadow,   id_cols = union(get_id_cols_abcd(), get_id_cols_hbcd()),   replacement = \"Missing due to joining\" )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_replace_binding_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix binding resulted missingness in shadow matrices — shadow_replace_binding_missing","text":"data tibble. data. shadow tibble. shadow matrix. id_cols character (vector). possible unique identifier columns. data need columns, present, used identify unique rows (Default: identifier columns used ABCD HBCD). example, ABCD data usually participant_id session_id, run_id provided, ignored. replacement character. value replace missing values .","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_replace_binding_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix binding resulted missingness in shadow matrices — shadow_replace_binding_missing","text":"tibble shadow matrix missing values replaced.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_replace_binding_missing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fix binding resulted missingness in shadow matrices — shadow_replace_binding_missing","text":"Data shadow requirements: two dataframes must columns number rows. must column names, order columns matter. recommended use column order row order (ID columns) dataframes, saves processing time.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/shadow_replace_binding_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix binding resulted missingness in shadow matrices — shadow_replace_binding_missing","text":"","code":"shadow <- tibble::tibble(   participant_id = c(\"1\", \"2\", \"3\"),   session_id = c(\"1\", \"2\", \"3\"),   var1 = c(\"Unknown\", NA, NA),   var2 = c(\"Wish not to answer\", NA, NA) ) data <- tibble::tibble(   participant_id = c(\"1\", \"2\", \"3\"),   session_id = c(\"1\", \"2\", \"3\"),   var1 = c(NA, NA, 1),   var2 = c(NA, 2, NA) ) shadow_replace_binding_missing(data, shadow) #> Error in check_pkgs(pkgs = list(NBDCtoolsData = list(remote = \"nbdc-datahub/NBDCtoolsData\")),     abort_msg = \"NBDCtoolsData package is not installed\", quiet = quiet): NBDCtoolsData package is not installed #> ✖ `NBDCtoolsData` #> ℹ Please install the missing packages with: #>  #> renv::install(c(\"nbdc-datahub/NBDCtoolsData\"))"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert categorical columns to factor — transf_factor","title":"Convert categorical columns to factor — transf_factor","text":"Based specifications data dictionary, transforms categorical columns factor.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert categorical columns to factor — transf_factor","text":"","code":"transf_factor(data, study, release = \"latest\")"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert categorical columns to factor — transf_factor","text":"data tibble. data transformed. Columns expected data dictionary. , skipped. study character. NBDC study (One \"abcd\" \"hbcd\". release character. Release version (Default: \"latest\").","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert categorical columns to factor — transf_factor","text":"tibble transformed data.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert categorical columns to factor — transf_factor","text":"","code":"if (FALSE) { # \\dontrun{ transf_factor(data, study = \"abcd\") } # }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Add variable/value labels — transf_label","title":"Add variable/value labels — transf_label","text":"function can add variable labels value labels data. variable labels descriptive information column, value labels levels factor variables.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add variable/value labels — transf_label","text":"","code":"transf_label(   data,   study,   release = \"latest\",   add_var_label = TRUE,   add_value_label = TRUE,   id_cols_labels = c(participant_id = \"Participant identifier\", session_id =     \"Event identifier\", run_id = \"Run identifier\") )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add variable/value labels — transf_label","text":"data tibble. data transformed. study character. NBDC study (One \"abcd\" \"hbcd\". release character. Release version (Default: \"latest\"). add_var_label logical. Whether add variable labels (Default: TRUE). add_value_label logical. Whether add value labels (Default: TRUE). id_cols_labels named character vector. named vector labels identifier columns, names column names values labels.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add variable/value labels — transf_label","text":"tibble labelled data.","code":""},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_label.html","id":"two-types-of-labels","dir":"Reference","previous_headings":"","what":"Two types of labels","title":"Add variable/value labels — transf_label","text":"least one add_var_label add_value_label must set TRUE. FALSE, error raised.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_label.html","id":"text-columns","dir":"Reference","previous_headings":"","what":"Text columns","title":"Add variable/value labels — transf_label","text":"transf_factor() function convert_text argument, convert text columns unordered factors. one uses type transformed data add labels, text-factor columns labels variable level.","code":""},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add variable/value labels — transf_label","text":"","code":"if (FALSE) { # \\dontrun{ transf_label(data) } # }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_time_to_hms.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time columns to hms format — transf_time_to_hms","title":"Convert time columns to hms format — transf_time_to_hms","text":"function converts time columns hms format.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_time_to_hms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time columns to hms format — transf_time_to_hms","text":"","code":"transf_time_to_hms(data, study, release = \"latest\")"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_time_to_hms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time columns to hms format — transf_time_to_hms","text":"data tibble. data converted. study character. NBDC study (One \"abcd\" \"hbcd\"). release character. Release version (Default: \"latest\").","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_time_to_hms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert time columns to hms format — transf_time_to_hms","text":"tibble time columns converted hms format.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_time_to_hms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert time columns to hms format — transf_time_to_hms","text":"input data time columns expected character format \"HH:MM:SS\". format, function return NA row.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_time_to_hms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert time columns to hms format — transf_time_to_hms","text":"","code":"if (FALSE) { # \\dontrun{ transf_time_to_hms(data) } # }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert values to labels for categorical variables — transf_value_to_label","title":"Convert values to labels for categorical variables — transf_value_to_label","text":"Converts values categorical/factor columns (e.g., \"1\", \"2\") labels (e.g., \"Male\", \"Female\"). value labels set values.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert values to labels for categorical variables — transf_value_to_label","text":"","code":"transf_value_to_label(data, transf_sess_id = FALSE)"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert values to labels for categorical variables — transf_value_to_label","text":"data tibble. labelled dataset transf_sess_id logical. Whether transform session_id column","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert values to labels for categorical variables — transf_value_to_label","text":"tibble factor columns transformed labels.","code":""},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_label.html","id":"input-requirements","dir":"Reference","previous_headings":"","what":"Input requirements","title":"Convert values to labels for categorical variables — transf_value_to_label","text":"data must type transformed labelled. See transf_factor() transf_label() details.","code":"data <- data |>   transf_factor() |>   transf_label()"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert values to labels for categorical variables — transf_value_to_label","text":"","code":"if (FALSE) { # \\dontrun{ transf_value_to_label(data) transf_value_to_label(data, value_to_na = TRUE) } # }"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert categorical missingness/non-response codes to NA — transf_value_to_na","title":"Convert categorical missingness/non-response codes to NA — transf_value_to_na","text":"function converts missing codes dataset NA factor columns. Example missing codes 999, 888, 777, etc.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert categorical missingness/non-response codes to NA — transf_value_to_na","text":"","code":"transf_value_to_na(   data,   missing_codes = c(\"999\", \"888\", \"777\", \"666\", \"555\", \"444\", \"333\", \"222\"),   ignore_col_pattern = \"__dk$|__dk__l$\",   id_cols = union(get_id_cols_abcd(), get_id_cols_hbcd()) )"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert categorical missingness/non-response codes to NA — transf_value_to_na","text":"data tibble. labelled dataset type converted data. missing_codes character vector. missing codes converted NA ignore_col_pattern character. regex pattern ignore columns converted NA. id_cols character vector. names ID columns excluded conversion (Default: identifier columns used ABCD HBCD).","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert categorical missingness/non-response codes to NA — transf_value_to_na","text":"tibble dataset missing codes converted NA","code":""},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_na.html","id":"use-case","dir":"Reference","previous_headings":"","what":"Use case","title":"Convert categorical missingness/non-response codes to NA — transf_value_to_na","text":"function works best ABCD data missing codes strictly defined. HBCD data, missing codes still discussion. function may work, undecided future missing codes, function may work expected. case HBCD data aribitrary missing codes one wishes convert NA, recommended use sjmisc::set_na_if() function instead.","code":""},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_na.html","id":"input-requirements","dir":"Reference","previous_headings":"","what":"Input requirements","title":"Convert categorical missingness/non-response codes to NA — transf_value_to_na","text":"data must type transformed labelled. See transf_factor() transf_label() details.","code":"data <- data |>   transf_factor() |>   transf_label()"},{"path":"https://software.nbdc-datahub.org/NBDCtools/reference/transf_value_to_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert categorical missingness/non-response codes to NA — transf_value_to_na","text":"","code":"if (FALSE) { # \\dontrun{ data <- data |>   transf_factor() |>   transf_label()  transf_value_to_na(data) } # }"},{"path":[]},{"path":"https://software.nbdc-datahub.org/NBDCtools/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"NBDCtools 1.0.0","text":"initial release NBDCtools package.","code":""}]
