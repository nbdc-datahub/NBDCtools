% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{convert_names_file}
\alias{convert_names_file}
\title{Convert column names in a file}
\usage{
convert_names_file(
  file_in,
  file_out = NULL,
  dd,
  name_from,
  name_to,
  skip_sep_check = FALSE
)
}
\arguments{
\item{file_in}{character. The input file path.}

\item{file_out}{character. The output file path. If not provided,
defaults to the input file path with a "_converted" suffix.}

\item{dd}{tibble. The data dictionary table. One can use \code{\link[=get_dd]{get_dd()}} family of
functions to get the data dictionary for a given study and release or
provide a custom data dictionary.}

\item{name_from}{character. The column name type in the data dictionary that
the columns in \code{data} currently use (Default: \code{"name"}). This column
must exist in the data dictionary.}

\item{name_to}{character. The column name type in the data dictionary
that the columns in \code{data} should be renamed to. This column
must exist in the data dictionary.}

\item{skip_sep_check}{logical. Whether to skip the check for
\code{name_from} and \code{name_to} columns' separators validation.
In our official data dictionaries, some columns have
multiple names separated by a \code{"|"} in the same cell.

For columns with multiple names, it the recommended to use functions like
\code{\link[tidyr:separate_rows]{tidyr::separate_rows()}} to split the names into multiple
rows and decide which name to use for the renaming by filtering the rows,
so that the \code{name_from} and \code{name_to} columns are one-to-one
mapping.

If \code{skip_sep_check = FALSE} (default), the function will check if the
\code{name_from} or \code{name_to} columns have the \code{"|"} separator and will throw
an error if the separator is found. If \code{skip_sep_check = TRUE}, it means
you understand that character strings with \code{"|"} inside will be used for
rename mapping, and the function will not check for the separator.}
}
\value{
character. The path to the output file with converted names,
invisible.
}
\description{
This function replaces all matched column names in a file
with another type of column name specified in the data dictionary.

For example, this function can be used to convert script files that specified
previously used column names to the the ABCD column names introduced in the
6.0 release. If you instead want to convert the column names in a data frame,
use \code{\link[=convert_names_data]{convert_names_data()}}.

Note: Please use this function with caution and make sure that the data in
the converted column is equivalent to the data in the original column. Also,
please make sure that the names can be mapped one-to-one. Some variables in
the ABCD data dictionary have been collapsed from previous releases and thus
might have multiple names in the \code{name_from} column that map to a single name
(see \code{skip_sep_check} argument below).
}
\details{
\subsection{Word matching}{

The function uses word boundaries to match the names in the file.
It Uses regex word boundaries (\verb{\\\\b}) to
ensure exact word matches. This prevents partial matches within larger
words. For example, matching "age" will not match "cage" or "page".
}

\subsection{Speed}{

The data dictionary is big from \code{\link[=get_dd]{get_dd()}}, so the function
would loop through all the names in the data dictionary.
If there are only a few names to replace,
it is the best to trim the data dictionary to only those names
before using this function.
}
}
\examples{
\dontrun{
convert_names_file(
  file_in = "analysis_script.R",
  dd = get_dd("abcd"),
  name_from = "name_nda",
  name_to = "name"
)

# Specify custom output file
convert_names_file(
  file_in = "analysis_script.py",
  file_out = "analysis_script_new.py",
  dd = get_dd("abcd"),
  name_from = "name_nda",
  name_to = "name"
)
}
}
